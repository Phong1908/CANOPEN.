
f429_usbcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080039f8  080039f8  000139f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af0  08003af0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001e8  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006afb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017c1  00000000  00000000  00026bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000698  00000000  00000000  00028398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004cc  00000000  00000000  00028a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000236c1  00000000  00000000  00028efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007a49  00000000  00000000  0004c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3220  00000000  00000000  00054006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002270  00000000  00000000  00127228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00129498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080039e0 	.word	0x080039e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080039e0 	.word	0x080039e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_GPIO_EXTI_Callback>:

uint32_t TxMailbox;
int datacheck = 0;
int sendDataFlag = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800059c:	d109      	bne.n	80005b2 <HAL_GPIO_EXTI_Callback+0x26>
    {
        sendDataFlag = !sendDataFlag;  // Đảo trạng thái gửi dữ liệu (Bật/Tắt)
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	bf0c      	ite	eq
 80005a6:	2301      	moveq	r3, #1
 80005a8:	2300      	movne	r3, #0
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80005b0:	601a      	str	r2, [r3, #0]
    }

    if (sendDataFlag)
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x64>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d016      	beq.n	80005e8 <HAL_GPIO_EXTI_Callback+0x5c>
    {
        // Randomize dữ liệu
        for (int i = 0; i < 8; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e010      	b.n	80005e2 <HAL_GPIO_EXTI_Callback+0x56>
        {
            TxData[i] = rand() % 256;  // Gửi giá trị ngẫu nhiên từ 0 đến 255
 80005c0:	f002 fa3c 	bl	8002a3c <rand>
 80005c4:	4603      	mov	r3, r0
 80005c6:	425a      	negs	r2, r3
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	bf58      	it	pl
 80005ce:	4253      	negpl	r3, r2
 80005d0:	b2d9      	uxtb	r1, r3
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x68>)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4413      	add	r3, r2
 80005d8:	460a      	mov	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 8; i++)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	ddeb      	ble.n	80005c0 <HAL_GPIO_EXTI_Callback+0x34>
        }
    }
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000f8 	.word	0x200000f8
 80005f4:	200000e0 	.word	0x200000e0

080005f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fef3 	bl	80013f2 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC == 8)
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	2b08      	cmp	r3, #8
 8000612:	d102      	bne.n	800061a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck = 1;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
	}
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000e8 	.word	0x200000e8
 8000628:	200000c4 	.word	0x200000c4
 800062c:	200000f4 	.word	0x200000f4

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fb4b 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f853 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f915 	bl	800086c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000642:	f000 f8bf 	bl	80007c4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
HAL_CAN_Start(&hcan1);
 8000646:	481f      	ldr	r0, [pc, #124]	; (80006c4 <main+0x94>)
 8000648:	f000 fdb4 	bl	80011b4 <HAL_CAN_Start>
//Thongbao
HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800064c:	2102      	movs	r1, #2
 800064e:	481d      	ldr	r0, [pc, #116]	; (80006c4 <main+0x94>)
 8000650:	f000 ffe1 	bl	8001616 <HAL_CAN_ActivateNotification>
TxHeader.DLC = 8;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0x98>)
 8000656:	2208      	movs	r2, #8
 8000658:	611a      	str	r2, [r3, #16]
TxHeader.IDE = CAN_ID_STD;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <main+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
TxHeader.RTR = CAN_RTR_DATA;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <main+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
TxHeader.StdId = 0x446;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <main+0x98>)
 8000668:	f240 4246 	movw	r2, #1094	; 0x446
 800066c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (sendDataFlag)
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <main+0x9c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <main+0x58>
	      {
	        HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <main+0xa0>)
 8000678:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <main+0xa4>)
 800067a:	4913      	ldr	r1, [pc, #76]	; (80006c8 <main+0x98>)
 800067c:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0x94>)
 800067e:	f000 fddd 	bl	800123c <HAL_CAN_AddTxMessage>
	        HAL_Delay(100);  // Gửi mỗi 1 giây
 8000682:	2064      	movs	r0, #100	; 0x64
 8000684:	f000 fb96 	bl	8000db4 <HAL_Delay>
	      }
	  if (datacheck)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <main+0xa8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0ee      	beq.n	800066e <main+0x3e>
	  {
		 //blink led
		  for (int i=0; i<RxData[1]; i++)
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	e00b      	b.n	80006ae <main+0x7e>
		  {
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4810      	ldr	r0, [pc, #64]	; (80006dc <main+0xac>)
 800069a:	f001 fce8 	bl	800206e <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <main+0xb0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fb86 	bl	8000db4 <HAL_Delay>
		  for (int i=0; i<RxData[1]; i++)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <main+0xb0>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4293      	cmp	r3, r2
 80006b8:	dbed      	blt.n	8000696 <main+0x66>
		  }
		  datacheck = 0;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <main+0xa8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
	  if (sendDataFlag)
 80006c0:	e7d5      	b.n	800066e <main+0x3e>
 80006c2:	bf00      	nop
 80006c4:	20000084 	.word	0x20000084
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	200000f8 	.word	0x200000f8
 80006d0:	200000f0 	.word	0x200000f0
 80006d4:	200000e0 	.word	0x200000e0
 80006d8:	200000f4 	.word	0x200000f4
 80006dc:	40020400 	.word	0x40020400
 80006e0:	200000e8 	.word	0x200000e8

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fad3 	bl	8002c9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <SystemClock_Config+0xd8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xd8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemClock_Config+0xdc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <SystemClock_Config+0xdc>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <SystemClock_Config+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000758:	23b4      	movs	r3, #180	; 0xb4
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fd03 	bl	8002174 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f8f0 	bl	8000958 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000778:	f001 fcac 	bl	80020d4 <HAL_PWREx_EnableOverDrive>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000782:	f000 f8e9 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2105      	movs	r1, #5
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 ff5d 	bl	8002664 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007b0:	f000 f8d2 	bl	8000958 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	; 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007cc:	4a26      	ldr	r2, [pc, #152]	; (8000868 <MX_CAN1_Init+0xa4>)
 80007ce:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007d2:	2212      	movs	r2, #18
 80007d4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007f0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_CAN1_Init+0xa0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_CAN1_Init+0xa0>)
 8000800:	2200      	movs	r2, #0
 8000802:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_CAN1_Init+0xa0>)
 8000806:	2200      	movs	r2, #0
 8000808:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_CAN1_Init+0xa0>)
 800080c:	2200      	movs	r2, #0
 800080e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_CAN1_Init+0xa0>)
 8000812:	2200      	movs	r2, #0
 8000814:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000816:	4813      	ldr	r0, [pc, #76]	; (8000864 <MX_CAN1_Init+0xa0>)
 8000818:	f000 faf0 	bl	8000dfc <HAL_CAN_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000822:	f000 f899 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
CAN_FilterTypeDef canfilterconfig;

canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
canfilterconfig.FilterBank = 10;
 800082a:	230a      	movs	r3, #10
 800082c:	617b      	str	r3, [r7, #20]
canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
canfilterconfig.FilterIdHigh = 0x103<<5;
 8000832:	f242 0360 	movw	r3, #8288	; 0x2060
 8000836:	603b      	str	r3, [r7, #0]
canfilterconfig.FilterIdLow = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	607b      	str	r3, [r7, #4]
canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 800083c:	f242 0360 	movw	r3, #8288	; 0x2060
 8000840:	60bb      	str	r3, [r7, #8]
canfilterconfig.FilterMaskIdLow = 0x0000;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
canfilterconfig.SlaveStartFilterBank = 20;
 800084e:	2314      	movs	r3, #20
 8000850:	627b      	str	r3, [r7, #36]	; 0x24

HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <MX_CAN1_Init+0xa0>)
 8000858:	f000 fbcc 	bl	8000ff4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000084 	.word	0x20000084
 8000868:	40006400 	.word	0x40006400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_GPIO_Init+0xe0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a30      	ldr	r2, [pc, #192]	; (800094c <MX_GPIO_Init+0xe0>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <MX_GPIO_Init+0xe0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <MX_GPIO_Init+0xe0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a29      	ldr	r2, [pc, #164]	; (800094c <MX_GPIO_Init+0xe0>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <MX_GPIO_Init+0xe0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <MX_GPIO_Init+0xe0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a22      	ldr	r2, [pc, #136]	; (800094c <MX_GPIO_Init+0xe0>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_GPIO_Init+0xe0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_GPIO_Init+0xe0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_GPIO_Init+0xe0>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_GPIO_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	4816      	ldr	r0, [pc, #88]	; (8000950 <MX_GPIO_Init+0xe4>)
 80008f8:	f001 fba0 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4810      	ldr	r0, [pc, #64]	; (8000954 <MX_GPIO_Init+0xe8>)
 8000914:	f001 f9e6 	bl	8001ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_GPIO_Init+0xe4>)
 8000930:	f001 f9d8 	bl	8001ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2028      	movs	r0, #40	; 0x28
 800093a:	f001 f99c 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800093e:	2028      	movs	r0, #40	; 0x28
 8000940:	f001 f9b5 	bl	8001cae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400
 8000954:	40020800 	.word	0x40020800

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <HAL_CAN_MspInit+0x94>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d133      	bne.n	8000a3e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_CAN_MspInit+0x98>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <HAL_CAN_MspInit+0x98>)
 80009e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_CAN_MspInit+0x98>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_CAN_MspInit+0x98>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <HAL_CAN_MspInit+0x98>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_CAN_MspInit+0x98>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <HAL_CAN_MspInit+0x9c>)
 8000a2a:	f001 f95b 	bl	8001ce4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2014      	movs	r0, #20
 8000a34:	f001 f91f 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f001 f938 	bl	8001cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40006400 	.word	0x40006400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020c00 	.word	0x40020c00

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f968 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <CAN1_RX0_IRQHandler+0x10>)
 8000aae:	f000 fdd8 	bl	8001662 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000084 	.word	0x20000084

08000abc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ac0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ac4:	f001 faee 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_kill>:

int _kill(int pid, int sig)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ae6:	f002 f929 	bl	8002d3c <__errno>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2216      	movs	r2, #22
 8000aee:	601a      	str	r2, [r3, #0]
  return -1;
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_exit>:

void _exit (int status)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ffe7 	bl	8000adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b0e:	e7fe      	b.n	8000b0e <_exit+0x12>

08000b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e00a      	b.n	8000b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b22:	f3af 8000 	nop.w
 8000b26:	4601      	mov	r1, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf0      	blt.n	8000b22 <_read+0x12>
  }

  return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e009      	b.n	8000b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf1      	blt.n	8000b5c <_write+0x12>
  }
  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_close>:

int _close(int file)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000baa:	605a      	str	r2, [r3, #4]
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <_isatty>:

int _isatty(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f002 f88e 	bl	8002d3c <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20030000 	.word	0x20030000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	200000fc 	.word	0x200000fc
 8000c54:	20000250 	.word	0x20000250

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca6:	f7ff ffd7 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f002 f84d 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fcbf 	bl	8000630 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cc0:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 8000cc4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cc8:	20000250 	.word	0x20000250

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 ffb1 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe2e 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 ffc9 	bl	8001cca <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 ff91 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000100 	.word	0x20000100

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000100 	.word	0x20000100

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e0ed      	b.n	8000fea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fdca 	bl	80009b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e30:	f7ff ffb4 	bl	8000d9c <HAL_GetTick>
 8000e34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e36:	e012      	b.n	8000e5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e38:	f7ff ffb0 	bl	8000d9c <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b0a      	cmp	r3, #10
 8000e44:	d90b      	bls.n	8000e5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2205      	movs	r2, #5
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e0c5      	b.n	8000fea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0e5      	beq.n	8000e38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0202 	bic.w	r2, r2, #2
 8000e7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e7c:	f7ff ff8e 	bl	8000d9c <HAL_GetTick>
 8000e80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e82:	e012      	b.n	8000eaa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e84:	f7ff ff8a 	bl	8000d9c <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b0a      	cmp	r3, #10
 8000e90:	d90b      	bls.n	8000eaa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e09f      	b.n	8000fea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e5      	bne.n	8000e84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7e1b      	ldrb	r3, [r3, #24]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d108      	bne.n	8000ed2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e007      	b.n	8000ee2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7e5b      	ldrb	r3, [r3, #25]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d108      	bne.n	8000efc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e007      	b.n	8000f0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7e9b      	ldrb	r3, [r3, #26]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d108      	bne.n	8000f26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0220 	orr.w	r2, r2, #32
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e007      	b.n	8000f36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0220 	bic.w	r2, r2, #32
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7edb      	ldrb	r3, [r3, #27]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d108      	bne.n	8000f50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0210 	bic.w	r2, r2, #16
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0210 	orr.w	r2, r2, #16
 8000f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7f1b      	ldrb	r3, [r3, #28]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d108      	bne.n	8000f7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0208 	orr.w	r2, r2, #8
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	e007      	b.n	8000f8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0208 	bic.w	r2, r2, #8
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7f5b      	ldrb	r3, [r3, #29]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d108      	bne.n	8000fa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0204 	orr.w	r2, r2, #4
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e007      	b.n	8000fb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0204 	bic.w	r2, r2, #4
 8000fb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	ea42 0103 	orr.w	r1, r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	1e5a      	subs	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800100c:	7cfb      	ldrb	r3, [r7, #19]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d003      	beq.n	800101a <HAL_CAN_ConfigFilter+0x26>
 8001012:	7cfb      	ldrb	r3, [r7, #19]
 8001014:	2b02      	cmp	r3, #2
 8001016:	f040 80be 	bne.w	8001196 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800101a:	4b65      	ldr	r3, [pc, #404]	; (80011b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800101c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001034:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	431a      	orrs	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	2201      	movs	r2, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	43db      	mvns	r3, r3
 800106c:	401a      	ands	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d123      	bne.n	80010c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800109e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3248      	adds	r2, #72	; 0x48
 80010a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ba:	6979      	ldr	r1, [r7, #20]
 80010bc:	3348      	adds	r3, #72	; 0x48
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d122      	bne.n	8001112 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3248      	adds	r2, #72	; 0x48
 80010f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001106:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001108:	6979      	ldr	r1, [r7, #20]
 800110a:	3348      	adds	r3, #72	; 0x48
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800112c:	e007      	b.n	800113e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	431a      	orrs	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	401a      	ands	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001158:	e007      	b.n	800116a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	431a      	orrs	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d107      	bne.n	8001182 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	431a      	orrs	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001188:	f023 0201 	bic.w	r2, r3, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e006      	b.n	80011a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
  }
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40006400 	.word	0x40006400

080011b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d12e      	bne.n	8001226 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011e0:	f7ff fddc 	bl	8000d9c <HAL_GetTick>
 80011e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e6:	e012      	b.n	800120e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e8:	f7ff fdd8 	bl	8000d9c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b0a      	cmp	r3, #10
 80011f4:	d90b      	bls.n	800120e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2205      	movs	r2, #5
 8001206:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e012      	b.n	8001234 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e5      	bne.n	80011e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e006      	b.n	8001234 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
  }
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001250:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800125a:	7ffb      	ldrb	r3, [r7, #31]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d003      	beq.n	8001268 <HAL_CAN_AddTxMessage+0x2c>
 8001260:	7ffb      	ldrb	r3, [r7, #31]
 8001262:	2b02      	cmp	r3, #2
 8001264:	f040 80b8 	bne.w	80013d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10a      	bne.n	8001288 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80a0 	beq.w	80013c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	0e1b      	lsrs	r3, r3, #24
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d907      	bls.n	80012a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e09e      	b.n	80013e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012a8:	2201      	movs	r2, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	409a      	lsls	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	6809      	ldr	r1, [r1, #0]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3318      	adds	r3, #24
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	440b      	add	r3, r1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e00f      	b.n	80012f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3318      	adds	r3, #24
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	440b      	add	r3, r1
 80012f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3318      	adds	r3, #24
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	440b      	add	r3, r1
 8001306:	3304      	adds	r3, #4
 8001308:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	7d1b      	ldrb	r3, [r3, #20]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d111      	bne.n	8001336 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3318      	adds	r3, #24
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	6811      	ldr	r1, [r2, #0]
 8001326:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3318      	adds	r3, #24
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	440b      	add	r3, r1
 8001332:	3304      	adds	r3, #4
 8001334:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3307      	adds	r3, #7
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	061a      	lsls	r2, r3, #24
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3306      	adds	r3, #6
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3305      	adds	r3, #5
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	4313      	orrs	r3, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	3204      	adds	r2, #4
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	4610      	mov	r0, r2
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	6811      	ldr	r1, [r2, #0]
 800135e:	ea43 0200 	orr.w	r2, r3, r0
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	440b      	add	r3, r1
 8001368:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800136c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3303      	adds	r3, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	061a      	lsls	r2, r3, #24
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3302      	adds	r3, #2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	4313      	orrs	r3, r2
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	4610      	mov	r0, r2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	6811      	ldr	r1, [r2, #0]
 8001394:	ea43 0200 	orr.w	r2, r3, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	440b      	add	r3, r1
 800139e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3318      	adds	r3, #24
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	6811      	ldr	r1, [r2, #0]
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3318      	adds	r3, #24
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	440b      	add	r3, r1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e00e      	b.n	80013e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e006      	b.n	80013e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013f2:	b480      	push	{r7}
 80013f4:	b087      	sub	sp, #28
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d003      	beq.n	8001416 <HAL_CAN_GetRxMessage+0x24>
 800140e:	7dfb      	ldrb	r3, [r7, #23]
 8001410:	2b02      	cmp	r3, #2
 8001412:	f040 80f3 	bne.w	80015fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10e      	bne.n	800143a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0e7      	b.n	800160a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d107      	bne.n	8001458 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0d8      	b.n	800160a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	331b      	adds	r3, #27
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0204 	and.w	r2, r3, #4
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	331b      	adds	r3, #27
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0d5b      	lsrs	r3, r3, #21
 8001486:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	331b      	adds	r3, #27
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	331b      	adds	r3, #27
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4413      	add	r3, r2
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0202 	and.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	331b      	adds	r3, #27
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	3304      	adds	r3, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 020f 	and.w	r2, r3, #15
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	331b      	adds	r3, #27
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	331b      	adds	r3, #27
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0a1a      	lsrs	r2, r3, #8
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0c1a      	lsrs	r2, r3, #16
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3302      	adds	r3, #2
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4413      	add	r3, r2
 800155a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0e1a      	lsrs	r2, r3, #24
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3303      	adds	r3, #3
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	4413      	add	r3, r2
 8001574:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3304      	adds	r3, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0a1a      	lsrs	r2, r3, #8
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3305      	adds	r3, #5
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0c1a      	lsrs	r2, r3, #16
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3306      	adds	r3, #6
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4413      	add	r3, r2
 80015c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	0e1a      	lsrs	r2, r3, #24
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3307      	adds	r3, #7
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d108      	bne.n	80015e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0220 	orr.w	r2, r2, #32
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	e007      	b.n	80015f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0220 	orr.w	r2, r2, #32
 80015f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e006      	b.n	800160a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001626:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d002      	beq.n	8001634 <HAL_CAN_ActivateNotification+0x1e>
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d109      	bne.n	8001648 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6959      	ldr	r1, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	e006      	b.n	8001656 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b08a      	sub	sp, #40	; 0x28
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d07c      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d023      	beq.n	80016fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2201      	movs	r2, #1
 80016b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f983 	bl	80019d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80016ca:	e016      	b.n	80016fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	e00c      	b.n	80016fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	e002      	b.n	80016fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f989 	bl	8001a0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d024      	beq.n	800174e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f963 	bl	80019e4 <HAL_CAN_TxMailbox1CompleteCallback>
 800171e:	e016      	b.n	800174e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
 8001732:	e00c      	b.n	800174e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	e002      	b.n	800174e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f969 	bl	8001a20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d024      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001760:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f943 	bl	80019f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001772:	e016      	b.n	80017a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
 8001786:	e00c      	b.n	80017a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
 800179a:	e002      	b.n	80017a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f949 	bl	8001a34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00c      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2210      	movs	r2, #16
 80017c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00b      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2208      	movs	r2, #8
 80017e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f930 	bl	8001a48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7fe fef9 	bl	80005f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00c      	beq.n	800182a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001820:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2210      	movs	r2, #16
 8001828:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00b      	beq.n	800184c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2208      	movs	r2, #8
 8001844:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f912 	bl	8001a70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f8f9 	bl	8001a5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2210      	movs	r2, #16
 8001884:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8fc 	bl	8001a84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2208      	movs	r2, #8
 80018a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f8f5 	bl	8001a98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d07b      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d072      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191c:	2b00      	cmp	r3, #0
 800191e:	d043      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03e      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001930:	2b60      	cmp	r3, #96	; 0x60
 8001932:	d02b      	beq.n	800198c <HAL_CAN_IRQHandler+0x32a>
 8001934:	2b60      	cmp	r3, #96	; 0x60
 8001936:	d82e      	bhi.n	8001996 <HAL_CAN_IRQHandler+0x334>
 8001938:	2b50      	cmp	r3, #80	; 0x50
 800193a:	d022      	beq.n	8001982 <HAL_CAN_IRQHandler+0x320>
 800193c:	2b50      	cmp	r3, #80	; 0x50
 800193e:	d82a      	bhi.n	8001996 <HAL_CAN_IRQHandler+0x334>
 8001940:	2b40      	cmp	r3, #64	; 0x40
 8001942:	d019      	beq.n	8001978 <HAL_CAN_IRQHandler+0x316>
 8001944:	2b40      	cmp	r3, #64	; 0x40
 8001946:	d826      	bhi.n	8001996 <HAL_CAN_IRQHandler+0x334>
 8001948:	2b30      	cmp	r3, #48	; 0x30
 800194a:	d010      	beq.n	800196e <HAL_CAN_IRQHandler+0x30c>
 800194c:	2b30      	cmp	r3, #48	; 0x30
 800194e:	d822      	bhi.n	8001996 <HAL_CAN_IRQHandler+0x334>
 8001950:	2b10      	cmp	r3, #16
 8001952:	d002      	beq.n	800195a <HAL_CAN_IRQHandler+0x2f8>
 8001954:	2b20      	cmp	r3, #32
 8001956:	d005      	beq.n	8001964 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001958:	e01d      	b.n	8001996 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001962:	e019      	b.n	8001998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800196c:	e014      	b.n	8001998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001976:	e00f      	b.n	8001998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001980:	e00a      	b.n	8001998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800198a:	e005      	b.n	8001998 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001994:	e000      	b.n	8001998 <HAL_CAN_IRQHandler+0x336>
            break;
 8001996:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2204      	movs	r2, #4
 80019ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f872 	bl	8001aac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
         );
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c88:	f7ff ff3e 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6978      	ldr	r0, [r7, #20]
 8001c94:	f7ff ff8e 	bl	8001bb4 <NVIC_EncodePriority>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff31 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa2 	bl	8001c1c <SysTick_Config>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e177      	b.n	8001ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	f040 8166 	bne.w	8001fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d005      	beq.n	8001d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d017      	beq.n	8001dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d123      	bne.n	8001e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	08da      	lsrs	r2, r3, #3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3208      	adds	r2, #8
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80c0 	beq.w	8001fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b66      	ldr	r3, [pc, #408]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a65      	ldr	r2, [pc, #404]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_GPIO_Init+0x324>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e86:	4a61      	ldr	r2, [pc, #388]	; (800200c <HAL_GPIO_Init+0x328>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_GPIO_Init+0x32c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d037      	beq.n	8001f22 <HAL_GPIO_Init+0x23e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a57      	ldr	r2, [pc, #348]	; (8002014 <HAL_GPIO_Init+0x330>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d031      	beq.n	8001f1e <HAL_GPIO_Init+0x23a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_GPIO_Init+0x334>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02b      	beq.n	8001f1a <HAL_GPIO_Init+0x236>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a55      	ldr	r2, [pc, #340]	; (800201c <HAL_GPIO_Init+0x338>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d025      	beq.n	8001f16 <HAL_GPIO_Init+0x232>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_GPIO_Init+0x33c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01f      	beq.n	8001f12 <HAL_GPIO_Init+0x22e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a53      	ldr	r2, [pc, #332]	; (8002024 <HAL_GPIO_Init+0x340>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0x22a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_GPIO_Init+0x344>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0x226>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a51      	ldr	r2, [pc, #324]	; (800202c <HAL_GPIO_Init+0x348>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_GPIO_Init+0x222>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a50      	ldr	r2, [pc, #320]	; (8002030 <HAL_GPIO_Init+0x34c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x21e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4f      	ldr	r2, [pc, #316]	; (8002034 <HAL_GPIO_Init+0x350>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_Init+0x21a>
 8001efa:	2309      	movs	r3, #9
 8001efc:	e012      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001efe:	230a      	movs	r3, #10
 8001f00:	e010      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f02:	2308      	movs	r3, #8
 8001f04:	e00e      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x328>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a34      	ldr	r2, [pc, #208]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a29      	ldr	r2, [pc, #164]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_GPIO_Init+0x354>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae84 	bls.w	8001d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40021c00 	.word	0x40021c00
 8002030:	40022000 	.word	0x40022000
 8002034:	40022400 	.word	0x40022400
 8002038:	40013c00 	.word	0x40013c00

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	619a      	str	r2, [r3, #24]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002080:	887a      	ldrh	r2, [r7, #2]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	041a      	lsls	r2, r3, #16
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43d9      	mvns	r1, r3
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	400b      	ands	r3, r1
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa62 	bl	800058c <HAL_GPIO_EXTI_Callback>
  }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_PWREx_EnableOverDrive+0x90>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <HAL_PWREx_EnableOverDrive+0x90>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_PWREx_EnableOverDrive+0x90>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_PWREx_EnableOverDrive+0x94>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002100:	f7fe fe4c 	bl	8000d9c <HAL_GetTick>
 8002104:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002106:	e009      	b.n	800211c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002108:	f7fe fe48 	bl	8000d9c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002116:	d901      	bls.n	800211c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e01f      	b.n	800215c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d1ee      	bne.n	8002108 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_PWREx_EnableOverDrive+0x9c>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002130:	f7fe fe34 	bl	8000d9c <HAL_GetTick>
 8002134:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002136:	e009      	b.n	800214c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002138:	f7fe fe30 	bl	8000d9c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002146:	d901      	bls.n	800214c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e007      	b.n	800215c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_PWREx_EnableOverDrive+0x98>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002158:	d1ee      	bne.n	8002138 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40023800 	.word	0x40023800
 8002168:	420e0040 	.word	0x420e0040
 800216c:	40007000 	.word	0x40007000
 8002170:	420e0044 	.word	0x420e0044

08002174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e267      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d075      	beq.n	800227e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002192:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b04      	cmp	r3, #4
 800219c:	d00c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219e:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d112      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021aa:	4b82      	ldr	r3, [pc, #520]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b6:	d10b      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	4b7e      	ldr	r3, [pc, #504]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d05b      	beq.n	800227c <HAL_RCC_OscConfig+0x108>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d157      	bne.n	800227c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e242      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0x74>
 80021da:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a75      	ldr	r2, [pc, #468]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e01d      	b.n	8002224 <HAL_RCC_OscConfig+0xb0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x98>
 80021f2:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6f      	ldr	r2, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80021f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b6d      	ldr	r3, [pc, #436]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6c      	ldr	r2, [pc, #432]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0xb0>
 800220c:	4b69      	ldr	r3, [pc, #420]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a68      	ldr	r2, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a65      	ldr	r2, [pc, #404]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fdb6 	bl	8000d9c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002234:	f7fe fdb2 	bl	8000d9c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e207      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b5b      	ldr	r3, [pc, #364]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0xc0>
 8002252:	e014      	b.n	800227e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fda2 	bl	8000d9c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800225c:	f7fe fd9e 	bl	8000d9c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b64      	cmp	r3, #100	; 0x64
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1f3      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0xe8>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d063      	beq.n	8002352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228a:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d11c      	bne.n	80022dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b44      	ldr	r3, [pc, #272]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d116      	bne.n	80022dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	4b41      	ldr	r3, [pc, #260]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x152>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e1c7      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4937      	ldr	r1, [pc, #220]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	e03a      	b.n	8002352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d020      	beq.n	8002326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e4:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_RCC_OscConfig+0x244>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe fd57 	bl	8000d9c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f2:	f7fe fd53 	bl	8000d9c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1a8      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	4925      	ldr	r1, [pc, #148]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	e015      	b.n	8002352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_OscConfig+0x244>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fd36 	bl	8000d9c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002334:	f7fe fd32 	bl	8000d9c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e187      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d036      	beq.n	80023cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_RCC_OscConfig+0x248>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe fd16 	bl	8000d9c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002374:	f7fe fd12 	bl	8000d9c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e167      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_OscConfig+0x240>)
 8002388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x200>
 8002392:	e01b      	b.n	80023cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_OscConfig+0x248>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fcff 	bl	8000d9c <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	e00e      	b.n	80023c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a2:	f7fe fcfb 	bl	8000d9c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d907      	bls.n	80023c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e150      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
 80023b4:	40023800 	.word	0x40023800
 80023b8:	42470000 	.word	0x42470000
 80023bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ea      	bne.n	80023a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8097 	beq.w	8002508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a7c      	ldr	r2, [pc, #496]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b7a      	ldr	r3, [pc, #488]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002406:	2301      	movs	r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b77      	ldr	r3, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d118      	bne.n	8002448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b74      	ldr	r3, [pc, #464]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a73      	ldr	r2, [pc, #460]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7fe fcbb 	bl	8000d9c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7fe fcb7 	bl	8000d9c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e10c      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x474>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x2ea>
 8002450:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a63      	ldr	r2, [pc, #396]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
 800245c:	e01c      	b.n	8002498 <HAL_RCC_OscConfig+0x324>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x30c>
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	6713      	str	r3, [r2, #112]	; 0x70
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x324>
 8002480:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a57      	ldr	r2, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a54      	ldr	r2, [pc, #336]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d015      	beq.n	80024cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7fe fc7c 	bl	8000d9c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a6:	e00a      	b.n	80024be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f7fe fc78 	bl	8000d9c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e0cb      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ee      	beq.n	80024a8 <HAL_RCC_OscConfig+0x334>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fc66 	bl	8000d9c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe fc62 	bl	8000d9c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0b5      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ea:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ee      	bne.n	80024d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	4a38      	ldr	r2, [pc, #224]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a1 	beq.w	8002654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d05c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d141      	bne.n	80025aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCC_OscConfig+0x478>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7fe fc36 	bl	8000d9c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fc32 	bl	8000d9c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e087      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	019b      	lsls	r3, r3, #6
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x478>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe fc0b 	bl	8000d9c <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fc07 	bl	8000d9c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e05c      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x416>
 80025a8:	e054      	b.n	8002654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_OscConfig+0x478>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fbf4 	bl	8000d9c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fbf0 	bl	8000d9c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e045      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x470>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x444>
 80025d6:	e03d      	b.n	8002654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e038      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x4ec>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d121      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0cc      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 030f 	and.w	r3, r3, #15
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d90c      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d044      	beq.n	8002784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d119      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d003      	beq.n	8002722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	2b03      	cmp	r3, #3
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e067      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b37      	ldr	r3, [pc, #220]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4934      	ldr	r1, [pc, #208]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002754:	f7fe fb22 	bl	8000d9c <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7fe fb1e 	bl	8000d9c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e04f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	429a      	cmp	r2, r3
 8002782:	d1eb      	bne.n	800275c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d20c      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fa82 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00
 8002820:	40023800 	.word	0x40023800
 8002824:	080039f8 	.word	0x080039f8
 8002828:	20000000 	.word	0x20000000
 800282c:	20000004 	.word	0x20000004

08002830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002834:	b094      	sub	sp, #80	; 0x50
 8002836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
 800283c:	2300      	movs	r3, #0
 800283e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002840:	2300      	movs	r3, #0
 8002842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002848:	4b79      	ldr	r3, [pc, #484]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d00d      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x40>
 8002854:	2b08      	cmp	r3, #8
 8002856:	f200 80e1 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x34>
 800285e:	2b04      	cmp	r3, #4
 8002860:	d003      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0x3a>
 8002862:	e0db      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b73      	ldr	r3, [pc, #460]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002868:	e0db      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800286a:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800286c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800286e:	e0d8      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002870:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	2200      	movs	r2, #0
 800288e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
 800289a:	2300      	movs	r3, #0
 800289c:	637b      	str	r3, [r7, #52]	; 0x34
 800289e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028a2:	4622      	mov	r2, r4
 80028a4:	462b      	mov	r3, r5
 80028a6:	f04f 0000 	mov.w	r0, #0
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	0159      	lsls	r1, r3, #5
 80028b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b4:	0150      	lsls	r0, r2, #5
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4621      	mov	r1, r4
 80028bc:	1a51      	subs	r1, r2, r1
 80028be:	6139      	str	r1, [r7, #16]
 80028c0:	4629      	mov	r1, r5
 80028c2:	eb63 0301 	sbc.w	r3, r3, r1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d4:	4659      	mov	r1, fp
 80028d6:	018b      	lsls	r3, r1, #6
 80028d8:	4651      	mov	r1, sl
 80028da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028de:	4651      	mov	r1, sl
 80028e0:	018a      	lsls	r2, r1, #6
 80028e2:	4651      	mov	r1, sl
 80028e4:	ebb2 0801 	subs.w	r8, r2, r1
 80028e8:	4659      	mov	r1, fp
 80028ea:	eb63 0901 	sbc.w	r9, r3, r1
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002902:	4690      	mov	r8, r2
 8002904:	4699      	mov	r9, r3
 8002906:	4623      	mov	r3, r4
 8002908:	eb18 0303 	adds.w	r3, r8, r3
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	462b      	mov	r3, r5
 8002910:	eb49 0303 	adc.w	r3, r9, r3
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002922:	4629      	mov	r1, r5
 8002924:	024b      	lsls	r3, r1, #9
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800292c:	4621      	mov	r1, r4
 800292e:	024a      	lsls	r2, r1, #9
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002936:	2200      	movs	r2, #0
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
 800293a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800293c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002940:	f7fd fca6 	bl	8000290 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4613      	mov	r3, r2
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800294c:	e058      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	2200      	movs	r2, #0
 8002956:	4618      	mov	r0, r3
 8002958:	4611      	mov	r1, r2
 800295a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800295e:	623b      	str	r3, [r7, #32]
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002968:	4642      	mov	r2, r8
 800296a:	464b      	mov	r3, r9
 800296c:	f04f 0000 	mov.w	r0, #0
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	0159      	lsls	r1, r3, #5
 8002976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800297a:	0150      	lsls	r0, r2, #5
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4641      	mov	r1, r8
 8002982:	ebb2 0a01 	subs.w	sl, r2, r1
 8002986:	4649      	mov	r1, r9
 8002988:	eb63 0b01 	sbc.w	fp, r3, r1
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800299c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029a0:	ebb2 040a 	subs.w	r4, r2, sl
 80029a4:	eb63 050b 	sbc.w	r5, r3, fp
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	00eb      	lsls	r3, r5, #3
 80029b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b6:	00e2      	lsls	r2, r4, #3
 80029b8:	4614      	mov	r4, r2
 80029ba:	461d      	mov	r5, r3
 80029bc:	4643      	mov	r3, r8
 80029be:	18e3      	adds	r3, r4, r3
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	464b      	mov	r3, r9
 80029c4:	eb45 0303 	adc.w	r3, r5, r3
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d6:	4629      	mov	r1, r5
 80029d8:	028b      	lsls	r3, r1, #10
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e0:	4621      	mov	r1, r4
 80029e2:	028a      	lsls	r2, r1, #10
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ea:	2200      	movs	r2, #0
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	61fa      	str	r2, [r7, #28]
 80029f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f4:	f7fd fc4c 	bl	8000290 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3750      	adds	r7, #80	; 0x50
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	007a1200 	.word	0x007a1200

08002a3c <rand>:
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <rand+0x5c>)
 8002a3e:	b510      	push	{r4, lr}
 8002a40:	681c      	ldr	r4, [r3, #0]
 8002a42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a44:	b9b3      	cbnz	r3, 8002a74 <rand+0x38>
 8002a46:	2018      	movs	r0, #24
 8002a48:	f000 fa0e 	bl	8002e68 <malloc>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6320      	str	r0, [r4, #48]	; 0x30
 8002a50:	b920      	cbnz	r0, 8002a5c <rand+0x20>
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <rand+0x60>)
 8002a54:	4812      	ldr	r0, [pc, #72]	; (8002aa0 <rand+0x64>)
 8002a56:	2152      	movs	r1, #82	; 0x52
 8002a58:	f000 f99c 	bl	8002d94 <__assert_func>
 8002a5c:	4911      	ldr	r1, [pc, #68]	; (8002aa4 <rand+0x68>)
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <rand+0x6c>)
 8002a60:	e9c0 1300 	strd	r1, r3, [r0]
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <rand+0x70>)
 8002a66:	6083      	str	r3, [r0, #8]
 8002a68:	230b      	movs	r3, #11
 8002a6a:	8183      	strh	r3, [r0, #12]
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2001      	movs	r0, #1
 8002a70:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a74:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002a76:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <rand+0x74>)
 8002a78:	690b      	ldr	r3, [r1, #16]
 8002a7a:	694c      	ldr	r4, [r1, #20]
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <rand+0x78>)
 8002a7e:	4358      	muls	r0, r3
 8002a80:	fb02 0004 	mla	r0, r2, r4, r0
 8002a84:	fba3 3202 	umull	r3, r2, r3, r2
 8002a88:	3301      	adds	r3, #1
 8002a8a:	eb40 0002 	adc.w	r0, r0, r2
 8002a8e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002a92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002a96:	bd10      	pop	{r4, pc}
 8002a98:	20000064 	.word	0x20000064
 8002a9c:	08003a08 	.word	0x08003a08
 8002aa0:	08003a1f 	.word	0x08003a1f
 8002aa4:	abcd330e 	.word	0xabcd330e
 8002aa8:	e66d1234 	.word	0xe66d1234
 8002aac:	0005deec 	.word	0x0005deec
 8002ab0:	5851f42d 	.word	0x5851f42d
 8002ab4:	4c957f2d 	.word	0x4c957f2d

08002ab8 <std>:
 8002ab8:	2300      	movs	r3, #0
 8002aba:	b510      	push	{r4, lr}
 8002abc:	4604      	mov	r4, r0
 8002abe:	e9c0 3300 	strd	r3, r3, [r0]
 8002ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ac6:	6083      	str	r3, [r0, #8]
 8002ac8:	8181      	strh	r1, [r0, #12]
 8002aca:	6643      	str	r3, [r0, #100]	; 0x64
 8002acc:	81c2      	strh	r2, [r0, #14]
 8002ace:	6183      	str	r3, [r0, #24]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	305c      	adds	r0, #92	; 0x5c
 8002ad6:	f000 f8e2 	bl	8002c9e <memset>
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <std+0x38>)
 8002adc:	6263      	str	r3, [r4, #36]	; 0x24
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <std+0x3c>)
 8002ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <std+0x40>)
 8002ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <std+0x44>)
 8002ae8:	6224      	str	r4, [r4, #32]
 8002aea:	6323      	str	r3, [r4, #48]	; 0x30
 8002aec:	bd10      	pop	{r4, pc}
 8002aee:	bf00      	nop
 8002af0:	08002c19 	.word	0x08002c19
 8002af4:	08002c3b 	.word	0x08002c3b
 8002af8:	08002c73 	.word	0x08002c73
 8002afc:	08002c97 	.word	0x08002c97

08002b00 <stdio_exit_handler>:
 8002b00:	4a02      	ldr	r2, [pc, #8]	; (8002b0c <stdio_exit_handler+0xc>)
 8002b02:	4903      	ldr	r1, [pc, #12]	; (8002b10 <stdio_exit_handler+0x10>)
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <stdio_exit_handler+0x14>)
 8002b06:	f000 b869 	b.w	8002bdc <_fwalk_sglue>
 8002b0a:	bf00      	nop
 8002b0c:	2000000c 	.word	0x2000000c
 8002b10:	080030dd 	.word	0x080030dd
 8002b14:	20000018 	.word	0x20000018

08002b18 <cleanup_stdio>:
 8002b18:	6841      	ldr	r1, [r0, #4]
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <cleanup_stdio+0x34>)
 8002b1c:	4299      	cmp	r1, r3
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	4604      	mov	r4, r0
 8002b22:	d001      	beq.n	8002b28 <cleanup_stdio+0x10>
 8002b24:	f000 fada 	bl	80030dc <_fflush_r>
 8002b28:	68a1      	ldr	r1, [r4, #8]
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <cleanup_stdio+0x38>)
 8002b2c:	4299      	cmp	r1, r3
 8002b2e:	d002      	beq.n	8002b36 <cleanup_stdio+0x1e>
 8002b30:	4620      	mov	r0, r4
 8002b32:	f000 fad3 	bl	80030dc <_fflush_r>
 8002b36:	68e1      	ldr	r1, [r4, #12]
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <cleanup_stdio+0x3c>)
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d004      	beq.n	8002b48 <cleanup_stdio+0x30>
 8002b3e:	4620      	mov	r0, r4
 8002b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b44:	f000 baca 	b.w	80030dc <_fflush_r>
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000104 	.word	0x20000104
 8002b50:	2000016c 	.word	0x2000016c
 8002b54:	200001d4 	.word	0x200001d4

08002b58 <global_stdio_init.part.0>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <global_stdio_init.part.0+0x30>)
 8002b5c:	4c0b      	ldr	r4, [pc, #44]	; (8002b8c <global_stdio_init.part.0+0x34>)
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <global_stdio_init.part.0+0x38>)
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	4620      	mov	r0, r4
 8002b64:	2200      	movs	r2, #0
 8002b66:	2104      	movs	r1, #4
 8002b68:	f7ff ffa6 	bl	8002ab8 <std>
 8002b6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b70:	2201      	movs	r2, #1
 8002b72:	2109      	movs	r1, #9
 8002b74:	f7ff ffa0 	bl	8002ab8 <std>
 8002b78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b82:	2112      	movs	r1, #18
 8002b84:	f7ff bf98 	b.w	8002ab8 <std>
 8002b88:	2000023c 	.word	0x2000023c
 8002b8c:	20000104 	.word	0x20000104
 8002b90:	08002b01 	.word	0x08002b01

08002b94 <__sfp_lock_acquire>:
 8002b94:	4801      	ldr	r0, [pc, #4]	; (8002b9c <__sfp_lock_acquire+0x8>)
 8002b96:	f000 b8fb 	b.w	8002d90 <__retarget_lock_acquire_recursive>
 8002b9a:	bf00      	nop
 8002b9c:	20000245 	.word	0x20000245

08002ba0 <__sfp_lock_release>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <__sfp_lock_release+0x8>)
 8002ba2:	f000 b8f6 	b.w	8002d92 <__retarget_lock_release_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	20000245 	.word	0x20000245

08002bac <__sinit>:
 8002bac:	b510      	push	{r4, lr}
 8002bae:	4604      	mov	r4, r0
 8002bb0:	f7ff fff0 	bl	8002b94 <__sfp_lock_acquire>
 8002bb4:	6a23      	ldr	r3, [r4, #32]
 8002bb6:	b11b      	cbz	r3, 8002bc0 <__sinit+0x14>
 8002bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bbc:	f7ff bff0 	b.w	8002ba0 <__sfp_lock_release>
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <__sinit+0x28>)
 8002bc2:	6223      	str	r3, [r4, #32]
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <__sinit+0x2c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f5      	bne.n	8002bb8 <__sinit+0xc>
 8002bcc:	f7ff ffc4 	bl	8002b58 <global_stdio_init.part.0>
 8002bd0:	e7f2      	b.n	8002bb8 <__sinit+0xc>
 8002bd2:	bf00      	nop
 8002bd4:	08002b19 	.word	0x08002b19
 8002bd8:	2000023c 	.word	0x2000023c

08002bdc <_fwalk_sglue>:
 8002bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002be0:	4607      	mov	r7, r0
 8002be2:	4688      	mov	r8, r1
 8002be4:	4614      	mov	r4, r2
 8002be6:	2600      	movs	r6, #0
 8002be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bec:	f1b9 0901 	subs.w	r9, r9, #1
 8002bf0:	d505      	bpl.n	8002bfe <_fwalk_sglue+0x22>
 8002bf2:	6824      	ldr	r4, [r4, #0]
 8002bf4:	2c00      	cmp	r4, #0
 8002bf6:	d1f7      	bne.n	8002be8 <_fwalk_sglue+0xc>
 8002bf8:	4630      	mov	r0, r6
 8002bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bfe:	89ab      	ldrh	r3, [r5, #12]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d907      	bls.n	8002c14 <_fwalk_sglue+0x38>
 8002c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	d003      	beq.n	8002c14 <_fwalk_sglue+0x38>
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	4638      	mov	r0, r7
 8002c10:	47c0      	blx	r8
 8002c12:	4306      	orrs	r6, r0
 8002c14:	3568      	adds	r5, #104	; 0x68
 8002c16:	e7e9      	b.n	8002bec <_fwalk_sglue+0x10>

08002c18 <__sread>:
 8002c18:	b510      	push	{r4, lr}
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c20:	f000 f868 	bl	8002cf4 <_read_r>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	bfab      	itete	ge
 8002c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c2c:	181b      	addge	r3, r3, r0
 8002c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c32:	bfac      	ite	ge
 8002c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c36:	81a3      	strhlt	r3, [r4, #12]
 8002c38:	bd10      	pop	{r4, pc}

08002c3a <__swrite>:
 8002c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c3e:	461f      	mov	r7, r3
 8002c40:	898b      	ldrh	r3, [r1, #12]
 8002c42:	05db      	lsls	r3, r3, #23
 8002c44:	4605      	mov	r5, r0
 8002c46:	460c      	mov	r4, r1
 8002c48:	4616      	mov	r6, r2
 8002c4a:	d505      	bpl.n	8002c58 <__swrite+0x1e>
 8002c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c50:	2302      	movs	r3, #2
 8002c52:	2200      	movs	r2, #0
 8002c54:	f000 f83c 	bl	8002cd0 <_lseek_r>
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	4632      	mov	r2, r6
 8002c66:	463b      	mov	r3, r7
 8002c68:	4628      	mov	r0, r5
 8002c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c6e:	f000 b853 	b.w	8002d18 <_write_r>

08002c72 <__sseek>:
 8002c72:	b510      	push	{r4, lr}
 8002c74:	460c      	mov	r4, r1
 8002c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7a:	f000 f829 	bl	8002cd0 <_lseek_r>
 8002c7e:	1c43      	adds	r3, r0, #1
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	bf15      	itete	ne
 8002c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c8e:	81a3      	strheq	r3, [r4, #12]
 8002c90:	bf18      	it	ne
 8002c92:	81a3      	strhne	r3, [r4, #12]
 8002c94:	bd10      	pop	{r4, pc}

08002c96 <__sclose>:
 8002c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9a:	f000 b809 	b.w	8002cb0 <_close_r>

08002c9e <memset>:
 8002c9e:	4402      	add	r2, r0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d100      	bne.n	8002ca8 <memset+0xa>
 8002ca6:	4770      	bx	lr
 8002ca8:	f803 1b01 	strb.w	r1, [r3], #1
 8002cac:	e7f9      	b.n	8002ca2 <memset+0x4>
	...

08002cb0 <_close_r>:
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	4d06      	ldr	r5, [pc, #24]	; (8002ccc <_close_r+0x1c>)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	4608      	mov	r0, r1
 8002cba:	602b      	str	r3, [r5, #0]
 8002cbc:	f7fd ff61 	bl	8000b82 <_close>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d102      	bne.n	8002cca <_close_r+0x1a>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	b103      	cbz	r3, 8002cca <_close_r+0x1a>
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	20000240 	.word	0x20000240

08002cd0 <_lseek_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4d07      	ldr	r5, [pc, #28]	; (8002cf0 <_lseek_r+0x20>)
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	4608      	mov	r0, r1
 8002cd8:	4611      	mov	r1, r2
 8002cda:	2200      	movs	r2, #0
 8002cdc:	602a      	str	r2, [r5, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f7fd ff76 	bl	8000bd0 <_lseek>
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	d102      	bne.n	8002cee <_lseek_r+0x1e>
 8002ce8:	682b      	ldr	r3, [r5, #0]
 8002cea:	b103      	cbz	r3, 8002cee <_lseek_r+0x1e>
 8002cec:	6023      	str	r3, [r4, #0]
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	20000240 	.word	0x20000240

08002cf4 <_read_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4d07      	ldr	r5, [pc, #28]	; (8002d14 <_read_r+0x20>)
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	602a      	str	r2, [r5, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7fd ff04 	bl	8000b10 <_read>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d102      	bne.n	8002d12 <_read_r+0x1e>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	b103      	cbz	r3, 8002d12 <_read_r+0x1e>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	20000240 	.word	0x20000240

08002d18 <_write_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4d07      	ldr	r5, [pc, #28]	; (8002d38 <_write_r+0x20>)
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	4608      	mov	r0, r1
 8002d20:	4611      	mov	r1, r2
 8002d22:	2200      	movs	r2, #0
 8002d24:	602a      	str	r2, [r5, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7fd ff0f 	bl	8000b4a <_write>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_write_r+0x1e>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_write_r+0x1e>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000240 	.word	0x20000240

08002d3c <__errno>:
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <__errno+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000064 	.word	0x20000064

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4d0d      	ldr	r5, [pc, #52]	; (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1b64      	subs	r4, r4, r5
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2600      	movs	r6, #0
 8002d54:	42a6      	cmp	r6, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4d0b      	ldr	r5, [pc, #44]	; (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 fe40 	bl	80039e0 <_init>
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2600      	movs	r6, #0
 8002d66:	42a6      	cmp	r6, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d70:	4798      	blx	r3
 8002d72:	3601      	adds	r6, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7a:	4798      	blx	r3
 8002d7c:	3601      	adds	r6, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08003af0 	.word	0x08003af0
 8002d84:	08003af0 	.word	0x08003af0
 8002d88:	08003af0 	.word	0x08003af0
 8002d8c:	08003af4 	.word	0x08003af4

08002d90 <__retarget_lock_acquire_recursive>:
 8002d90:	4770      	bx	lr

08002d92 <__retarget_lock_release_recursive>:
 8002d92:	4770      	bx	lr

08002d94 <__assert_func>:
 8002d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002d96:	4614      	mov	r4, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <__assert_func+0x2c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4605      	mov	r5, r0
 8002da0:	68d8      	ldr	r0, [r3, #12]
 8002da2:	b14c      	cbz	r4, 8002db8 <__assert_func+0x24>
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <__assert_func+0x30>)
 8002da6:	9100      	str	r1, [sp, #0]
 8002da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002dac:	4906      	ldr	r1, [pc, #24]	; (8002dc8 <__assert_func+0x34>)
 8002dae:	462b      	mov	r3, r5
 8002db0:	f000 f9bc 	bl	800312c <fiprintf>
 8002db4:	f000 f9dc 	bl	8003170 <abort>
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <__assert_func+0x38>)
 8002dba:	461c      	mov	r4, r3
 8002dbc:	e7f3      	b.n	8002da6 <__assert_func+0x12>
 8002dbe:	bf00      	nop
 8002dc0:	20000064 	.word	0x20000064
 8002dc4:	08003a77 	.word	0x08003a77
 8002dc8:	08003a84 	.word	0x08003a84
 8002dcc:	08003ab2 	.word	0x08003ab2

08002dd0 <_free_r>:
 8002dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d044      	beq.n	8002e60 <_free_r+0x90>
 8002dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dda:	9001      	str	r0, [sp, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f1a1 0404 	sub.w	r4, r1, #4
 8002de2:	bfb8      	it	lt
 8002de4:	18e4      	addlt	r4, r4, r3
 8002de6:	f000 f8e7 	bl	8002fb8 <__malloc_lock>
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <_free_r+0x94>)
 8002dec:	9801      	ldr	r0, [sp, #4]
 8002dee:	6813      	ldr	r3, [r2, #0]
 8002df0:	b933      	cbnz	r3, 8002e00 <_free_r+0x30>
 8002df2:	6063      	str	r3, [r4, #4]
 8002df4:	6014      	str	r4, [r2, #0]
 8002df6:	b003      	add	sp, #12
 8002df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dfc:	f000 b8e2 	b.w	8002fc4 <__malloc_unlock>
 8002e00:	42a3      	cmp	r3, r4
 8002e02:	d908      	bls.n	8002e16 <_free_r+0x46>
 8002e04:	6825      	ldr	r5, [r4, #0]
 8002e06:	1961      	adds	r1, r4, r5
 8002e08:	428b      	cmp	r3, r1
 8002e0a:	bf01      	itttt	eq
 8002e0c:	6819      	ldreq	r1, [r3, #0]
 8002e0e:	685b      	ldreq	r3, [r3, #4]
 8002e10:	1949      	addeq	r1, r1, r5
 8002e12:	6021      	streq	r1, [r4, #0]
 8002e14:	e7ed      	b.n	8002df2 <_free_r+0x22>
 8002e16:	461a      	mov	r2, r3
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	b10b      	cbz	r3, 8002e20 <_free_r+0x50>
 8002e1c:	42a3      	cmp	r3, r4
 8002e1e:	d9fa      	bls.n	8002e16 <_free_r+0x46>
 8002e20:	6811      	ldr	r1, [r2, #0]
 8002e22:	1855      	adds	r5, r2, r1
 8002e24:	42a5      	cmp	r5, r4
 8002e26:	d10b      	bne.n	8002e40 <_free_r+0x70>
 8002e28:	6824      	ldr	r4, [r4, #0]
 8002e2a:	4421      	add	r1, r4
 8002e2c:	1854      	adds	r4, r2, r1
 8002e2e:	42a3      	cmp	r3, r4
 8002e30:	6011      	str	r1, [r2, #0]
 8002e32:	d1e0      	bne.n	8002df6 <_free_r+0x26>
 8002e34:	681c      	ldr	r4, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	6053      	str	r3, [r2, #4]
 8002e3a:	440c      	add	r4, r1
 8002e3c:	6014      	str	r4, [r2, #0]
 8002e3e:	e7da      	b.n	8002df6 <_free_r+0x26>
 8002e40:	d902      	bls.n	8002e48 <_free_r+0x78>
 8002e42:	230c      	movs	r3, #12
 8002e44:	6003      	str	r3, [r0, #0]
 8002e46:	e7d6      	b.n	8002df6 <_free_r+0x26>
 8002e48:	6825      	ldr	r5, [r4, #0]
 8002e4a:	1961      	adds	r1, r4, r5
 8002e4c:	428b      	cmp	r3, r1
 8002e4e:	bf04      	itt	eq
 8002e50:	6819      	ldreq	r1, [r3, #0]
 8002e52:	685b      	ldreq	r3, [r3, #4]
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	bf04      	itt	eq
 8002e58:	1949      	addeq	r1, r1, r5
 8002e5a:	6021      	streq	r1, [r4, #0]
 8002e5c:	6054      	str	r4, [r2, #4]
 8002e5e:	e7ca      	b.n	8002df6 <_free_r+0x26>
 8002e60:	b003      	add	sp, #12
 8002e62:	bd30      	pop	{r4, r5, pc}
 8002e64:	20000248 	.word	0x20000248

08002e68 <malloc>:
 8002e68:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <malloc+0xc>)
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	f000 b823 	b.w	8002eb8 <_malloc_r>
 8002e72:	bf00      	nop
 8002e74:	20000064 	.word	0x20000064

08002e78 <sbrk_aligned>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4e0e      	ldr	r6, [pc, #56]	; (8002eb4 <sbrk_aligned+0x3c>)
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	6831      	ldr	r1, [r6, #0]
 8002e80:	4605      	mov	r5, r0
 8002e82:	b911      	cbnz	r1, 8002e8a <sbrk_aligned+0x12>
 8002e84:	f000 f964 	bl	8003150 <_sbrk_r>
 8002e88:	6030      	str	r0, [r6, #0]
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f000 f95f 	bl	8003150 <_sbrk_r>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	d00a      	beq.n	8002eac <sbrk_aligned+0x34>
 8002e96:	1cc4      	adds	r4, r0, #3
 8002e98:	f024 0403 	bic.w	r4, r4, #3
 8002e9c:	42a0      	cmp	r0, r4
 8002e9e:	d007      	beq.n	8002eb0 <sbrk_aligned+0x38>
 8002ea0:	1a21      	subs	r1, r4, r0
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f000 f954 	bl	8003150 <_sbrk_r>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d101      	bne.n	8002eb0 <sbrk_aligned+0x38>
 8002eac:	f04f 34ff 	mov.w	r4, #4294967295
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	2000024c 	.word	0x2000024c

08002eb8 <_malloc_r>:
 8002eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ebc:	1ccd      	adds	r5, r1, #3
 8002ebe:	f025 0503 	bic.w	r5, r5, #3
 8002ec2:	3508      	adds	r5, #8
 8002ec4:	2d0c      	cmp	r5, #12
 8002ec6:	bf38      	it	cc
 8002ec8:	250c      	movcc	r5, #12
 8002eca:	2d00      	cmp	r5, #0
 8002ecc:	4607      	mov	r7, r0
 8002ece:	db01      	blt.n	8002ed4 <_malloc_r+0x1c>
 8002ed0:	42a9      	cmp	r1, r5
 8002ed2:	d905      	bls.n	8002ee0 <_malloc_r+0x28>
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	2600      	movs	r6, #0
 8002eda:	4630      	mov	r0, r6
 8002edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fb4 <_malloc_r+0xfc>
 8002ee4:	f000 f868 	bl	8002fb8 <__malloc_lock>
 8002ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8002eec:	461c      	mov	r4, r3
 8002eee:	bb5c      	cbnz	r4, 8002f48 <_malloc_r+0x90>
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f7ff ffc0 	bl	8002e78 <sbrk_aligned>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	4604      	mov	r4, r0
 8002efc:	d155      	bne.n	8002faa <_malloc_r+0xf2>
 8002efe:	f8d8 4000 	ldr.w	r4, [r8]
 8002f02:	4626      	mov	r6, r4
 8002f04:	2e00      	cmp	r6, #0
 8002f06:	d145      	bne.n	8002f94 <_malloc_r+0xdc>
 8002f08:	2c00      	cmp	r4, #0
 8002f0a:	d048      	beq.n	8002f9e <_malloc_r+0xe6>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4638      	mov	r0, r7
 8002f12:	eb04 0903 	add.w	r9, r4, r3
 8002f16:	f000 f91b 	bl	8003150 <_sbrk_r>
 8002f1a:	4581      	cmp	r9, r0
 8002f1c:	d13f      	bne.n	8002f9e <_malloc_r+0xe6>
 8002f1e:	6821      	ldr	r1, [r4, #0]
 8002f20:	1a6d      	subs	r5, r5, r1
 8002f22:	4629      	mov	r1, r5
 8002f24:	4638      	mov	r0, r7
 8002f26:	f7ff ffa7 	bl	8002e78 <sbrk_aligned>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d037      	beq.n	8002f9e <_malloc_r+0xe6>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	442b      	add	r3, r5
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	f8d8 3000 	ldr.w	r3, [r8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d038      	beq.n	8002fae <_malloc_r+0xf6>
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	42a2      	cmp	r2, r4
 8002f40:	d12b      	bne.n	8002f9a <_malloc_r+0xe2>
 8002f42:	2200      	movs	r2, #0
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	e00f      	b.n	8002f68 <_malloc_r+0xb0>
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	1b52      	subs	r2, r2, r5
 8002f4c:	d41f      	bmi.n	8002f8e <_malloc_r+0xd6>
 8002f4e:	2a0b      	cmp	r2, #11
 8002f50:	d917      	bls.n	8002f82 <_malloc_r+0xca>
 8002f52:	1961      	adds	r1, r4, r5
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	6025      	str	r5, [r4, #0]
 8002f58:	bf18      	it	ne
 8002f5a:	6059      	strne	r1, [r3, #4]
 8002f5c:	6863      	ldr	r3, [r4, #4]
 8002f5e:	bf08      	it	eq
 8002f60:	f8c8 1000 	streq.w	r1, [r8]
 8002f64:	5162      	str	r2, [r4, r5]
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f104 060b 	add.w	r6, r4, #11
 8002f6e:	f000 f829 	bl	8002fc4 <__malloc_unlock>
 8002f72:	f026 0607 	bic.w	r6, r6, #7
 8002f76:	1d23      	adds	r3, r4, #4
 8002f78:	1af2      	subs	r2, r6, r3
 8002f7a:	d0ae      	beq.n	8002eda <_malloc_r+0x22>
 8002f7c:	1b9b      	subs	r3, r3, r6
 8002f7e:	50a3      	str	r3, [r4, r2]
 8002f80:	e7ab      	b.n	8002eda <_malloc_r+0x22>
 8002f82:	42a3      	cmp	r3, r4
 8002f84:	6862      	ldr	r2, [r4, #4]
 8002f86:	d1dd      	bne.n	8002f44 <_malloc_r+0x8c>
 8002f88:	f8c8 2000 	str.w	r2, [r8]
 8002f8c:	e7ec      	b.n	8002f68 <_malloc_r+0xb0>
 8002f8e:	4623      	mov	r3, r4
 8002f90:	6864      	ldr	r4, [r4, #4]
 8002f92:	e7ac      	b.n	8002eee <_malloc_r+0x36>
 8002f94:	4634      	mov	r4, r6
 8002f96:	6876      	ldr	r6, [r6, #4]
 8002f98:	e7b4      	b.n	8002f04 <_malloc_r+0x4c>
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	e7cc      	b.n	8002f38 <_malloc_r+0x80>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	f000 f80e 	bl	8002fc4 <__malloc_unlock>
 8002fa8:	e797      	b.n	8002eda <_malloc_r+0x22>
 8002faa:	6025      	str	r5, [r4, #0]
 8002fac:	e7dc      	b.n	8002f68 <_malloc_r+0xb0>
 8002fae:	605b      	str	r3, [r3, #4]
 8002fb0:	deff      	udf	#255	; 0xff
 8002fb2:	bf00      	nop
 8002fb4:	20000248 	.word	0x20000248

08002fb8 <__malloc_lock>:
 8002fb8:	4801      	ldr	r0, [pc, #4]	; (8002fc0 <__malloc_lock+0x8>)
 8002fba:	f7ff bee9 	b.w	8002d90 <__retarget_lock_acquire_recursive>
 8002fbe:	bf00      	nop
 8002fc0:	20000244 	.word	0x20000244

08002fc4 <__malloc_unlock>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <__malloc_unlock+0x8>)
 8002fc6:	f7ff bee4 	b.w	8002d92 <__retarget_lock_release_recursive>
 8002fca:	bf00      	nop
 8002fcc:	20000244 	.word	0x20000244

08002fd0 <__sflush_r>:
 8002fd0:	898a      	ldrh	r2, [r1, #12]
 8002fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	0710      	lsls	r0, r2, #28
 8002fda:	460c      	mov	r4, r1
 8002fdc:	d458      	bmi.n	8003090 <__sflush_r+0xc0>
 8002fde:	684b      	ldr	r3, [r1, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dc05      	bgt.n	8002ff0 <__sflush_r+0x20>
 8002fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	dc02      	bgt.n	8002ff0 <__sflush_r+0x20>
 8002fea:	2000      	movs	r0, #0
 8002fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ff2:	2e00      	cmp	r6, #0
 8002ff4:	d0f9      	beq.n	8002fea <__sflush_r+0x1a>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ffc:	682f      	ldr	r7, [r5, #0]
 8002ffe:	6a21      	ldr	r1, [r4, #32]
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	d032      	beq.n	800306a <__sflush_r+0x9a>
 8003004:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	075a      	lsls	r2, r3, #29
 800300a:	d505      	bpl.n	8003018 <__sflush_r+0x48>
 800300c:	6863      	ldr	r3, [r4, #4]
 800300e:	1ac0      	subs	r0, r0, r3
 8003010:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003012:	b10b      	cbz	r3, 8003018 <__sflush_r+0x48>
 8003014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003016:	1ac0      	subs	r0, r0, r3
 8003018:	2300      	movs	r3, #0
 800301a:	4602      	mov	r2, r0
 800301c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800301e:	6a21      	ldr	r1, [r4, #32]
 8003020:	4628      	mov	r0, r5
 8003022:	47b0      	blx	r6
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	89a3      	ldrh	r3, [r4, #12]
 8003028:	d106      	bne.n	8003038 <__sflush_r+0x68>
 800302a:	6829      	ldr	r1, [r5, #0]
 800302c:	291d      	cmp	r1, #29
 800302e:	d82b      	bhi.n	8003088 <__sflush_r+0xb8>
 8003030:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <__sflush_r+0x108>)
 8003032:	410a      	asrs	r2, r1
 8003034:	07d6      	lsls	r6, r2, #31
 8003036:	d427      	bmi.n	8003088 <__sflush_r+0xb8>
 8003038:	2200      	movs	r2, #0
 800303a:	6062      	str	r2, [r4, #4]
 800303c:	04d9      	lsls	r1, r3, #19
 800303e:	6922      	ldr	r2, [r4, #16]
 8003040:	6022      	str	r2, [r4, #0]
 8003042:	d504      	bpl.n	800304e <__sflush_r+0x7e>
 8003044:	1c42      	adds	r2, r0, #1
 8003046:	d101      	bne.n	800304c <__sflush_r+0x7c>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	b903      	cbnz	r3, 800304e <__sflush_r+0x7e>
 800304c:	6560      	str	r0, [r4, #84]	; 0x54
 800304e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003050:	602f      	str	r7, [r5, #0]
 8003052:	2900      	cmp	r1, #0
 8003054:	d0c9      	beq.n	8002fea <__sflush_r+0x1a>
 8003056:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800305a:	4299      	cmp	r1, r3
 800305c:	d002      	beq.n	8003064 <__sflush_r+0x94>
 800305e:	4628      	mov	r0, r5
 8003060:	f7ff feb6 	bl	8002dd0 <_free_r>
 8003064:	2000      	movs	r0, #0
 8003066:	6360      	str	r0, [r4, #52]	; 0x34
 8003068:	e7c0      	b.n	8002fec <__sflush_r+0x1c>
 800306a:	2301      	movs	r3, #1
 800306c:	4628      	mov	r0, r5
 800306e:	47b0      	blx	r6
 8003070:	1c41      	adds	r1, r0, #1
 8003072:	d1c8      	bne.n	8003006 <__sflush_r+0x36>
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0c5      	beq.n	8003006 <__sflush_r+0x36>
 800307a:	2b1d      	cmp	r3, #29
 800307c:	d001      	beq.n	8003082 <__sflush_r+0xb2>
 800307e:	2b16      	cmp	r3, #22
 8003080:	d101      	bne.n	8003086 <__sflush_r+0xb6>
 8003082:	602f      	str	r7, [r5, #0]
 8003084:	e7b1      	b.n	8002fea <__sflush_r+0x1a>
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800308c:	81a3      	strh	r3, [r4, #12]
 800308e:	e7ad      	b.n	8002fec <__sflush_r+0x1c>
 8003090:	690f      	ldr	r7, [r1, #16]
 8003092:	2f00      	cmp	r7, #0
 8003094:	d0a9      	beq.n	8002fea <__sflush_r+0x1a>
 8003096:	0793      	lsls	r3, r2, #30
 8003098:	680e      	ldr	r6, [r1, #0]
 800309a:	bf08      	it	eq
 800309c:	694b      	ldreq	r3, [r1, #20]
 800309e:	600f      	str	r7, [r1, #0]
 80030a0:	bf18      	it	ne
 80030a2:	2300      	movne	r3, #0
 80030a4:	eba6 0807 	sub.w	r8, r6, r7
 80030a8:	608b      	str	r3, [r1, #8]
 80030aa:	f1b8 0f00 	cmp.w	r8, #0
 80030ae:	dd9c      	ble.n	8002fea <__sflush_r+0x1a>
 80030b0:	6a21      	ldr	r1, [r4, #32]
 80030b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030b4:	4643      	mov	r3, r8
 80030b6:	463a      	mov	r2, r7
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b0      	blx	r6
 80030bc:	2800      	cmp	r0, #0
 80030be:	dc06      	bgt.n	80030ce <__sflush_r+0xfe>
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	e78e      	b.n	8002fec <__sflush_r+0x1c>
 80030ce:	4407      	add	r7, r0
 80030d0:	eba8 0800 	sub.w	r8, r8, r0
 80030d4:	e7e9      	b.n	80030aa <__sflush_r+0xda>
 80030d6:	bf00      	nop
 80030d8:	dfbffffe 	.word	0xdfbffffe

080030dc <_fflush_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	690b      	ldr	r3, [r1, #16]
 80030e0:	4605      	mov	r5, r0
 80030e2:	460c      	mov	r4, r1
 80030e4:	b913      	cbnz	r3, 80030ec <_fflush_r+0x10>
 80030e6:	2500      	movs	r5, #0
 80030e8:	4628      	mov	r0, r5
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	b118      	cbz	r0, 80030f6 <_fflush_r+0x1a>
 80030ee:	6a03      	ldr	r3, [r0, #32]
 80030f0:	b90b      	cbnz	r3, 80030f6 <_fflush_r+0x1a>
 80030f2:	f7ff fd5b 	bl	8002bac <__sinit>
 80030f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f3      	beq.n	80030e6 <_fflush_r+0xa>
 80030fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003100:	07d0      	lsls	r0, r2, #31
 8003102:	d404      	bmi.n	800310e <_fflush_r+0x32>
 8003104:	0599      	lsls	r1, r3, #22
 8003106:	d402      	bmi.n	800310e <_fflush_r+0x32>
 8003108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800310a:	f7ff fe41 	bl	8002d90 <__retarget_lock_acquire_recursive>
 800310e:	4628      	mov	r0, r5
 8003110:	4621      	mov	r1, r4
 8003112:	f7ff ff5d 	bl	8002fd0 <__sflush_r>
 8003116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003118:	07da      	lsls	r2, r3, #31
 800311a:	4605      	mov	r5, r0
 800311c:	d4e4      	bmi.n	80030e8 <_fflush_r+0xc>
 800311e:	89a3      	ldrh	r3, [r4, #12]
 8003120:	059b      	lsls	r3, r3, #22
 8003122:	d4e1      	bmi.n	80030e8 <_fflush_r+0xc>
 8003124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003126:	f7ff fe34 	bl	8002d92 <__retarget_lock_release_recursive>
 800312a:	e7dd      	b.n	80030e8 <_fflush_r+0xc>

0800312c <fiprintf>:
 800312c:	b40e      	push	{r1, r2, r3}
 800312e:	b503      	push	{r0, r1, lr}
 8003130:	4601      	mov	r1, r0
 8003132:	ab03      	add	r3, sp, #12
 8003134:	4805      	ldr	r0, [pc, #20]	; (800314c <fiprintf+0x20>)
 8003136:	f853 2b04 	ldr.w	r2, [r3], #4
 800313a:	6800      	ldr	r0, [r0, #0]
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	f000 f847 	bl	80031d0 <_vfiprintf_r>
 8003142:	b002      	add	sp, #8
 8003144:	f85d eb04 	ldr.w	lr, [sp], #4
 8003148:	b003      	add	sp, #12
 800314a:	4770      	bx	lr
 800314c:	20000064 	.word	0x20000064

08003150 <_sbrk_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d06      	ldr	r5, [pc, #24]	; (800316c <_sbrk_r+0x1c>)
 8003154:	2300      	movs	r3, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	f7fd fd46 	bl	8000bec <_sbrk>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_sbrk_r+0x1a>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_sbrk_r+0x1a>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	20000240 	.word	0x20000240

08003170 <abort>:
 8003170:	b508      	push	{r3, lr}
 8003172:	2006      	movs	r0, #6
 8003174:	f000 fb94 	bl	80038a0 <raise>
 8003178:	2001      	movs	r0, #1
 800317a:	f7fd fcbf 	bl	8000afc <_exit>

0800317e <__sfputc_r>:
 800317e:	6893      	ldr	r3, [r2, #8]
 8003180:	3b01      	subs	r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	b410      	push	{r4}
 8003186:	6093      	str	r3, [r2, #8]
 8003188:	da08      	bge.n	800319c <__sfputc_r+0x1e>
 800318a:	6994      	ldr	r4, [r2, #24]
 800318c:	42a3      	cmp	r3, r4
 800318e:	db01      	blt.n	8003194 <__sfputc_r+0x16>
 8003190:	290a      	cmp	r1, #10
 8003192:	d103      	bne.n	800319c <__sfputc_r+0x1e>
 8003194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003198:	f000 bac4 	b.w	8003724 <__swbuf_r>
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	1c58      	adds	r0, r3, #1
 80031a0:	6010      	str	r0, [r2, #0]
 80031a2:	7019      	strb	r1, [r3, #0]
 80031a4:	4608      	mov	r0, r1
 80031a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <__sfputs_r>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	4606      	mov	r6, r0
 80031b0:	460f      	mov	r7, r1
 80031b2:	4614      	mov	r4, r2
 80031b4:	18d5      	adds	r5, r2, r3
 80031b6:	42ac      	cmp	r4, r5
 80031b8:	d101      	bne.n	80031be <__sfputs_r+0x12>
 80031ba:	2000      	movs	r0, #0
 80031bc:	e007      	b.n	80031ce <__sfputs_r+0x22>
 80031be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c2:	463a      	mov	r2, r7
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7ff ffda 	bl	800317e <__sfputc_r>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	d1f3      	bne.n	80031b6 <__sfputs_r+0xa>
 80031ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031d0 <_vfiprintf_r>:
 80031d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d4:	460d      	mov	r5, r1
 80031d6:	b09d      	sub	sp, #116	; 0x74
 80031d8:	4614      	mov	r4, r2
 80031da:	4698      	mov	r8, r3
 80031dc:	4606      	mov	r6, r0
 80031de:	b118      	cbz	r0, 80031e8 <_vfiprintf_r+0x18>
 80031e0:	6a03      	ldr	r3, [r0, #32]
 80031e2:	b90b      	cbnz	r3, 80031e8 <_vfiprintf_r+0x18>
 80031e4:	f7ff fce2 	bl	8002bac <__sinit>
 80031e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031ea:	07d9      	lsls	r1, r3, #31
 80031ec:	d405      	bmi.n	80031fa <_vfiprintf_r+0x2a>
 80031ee:	89ab      	ldrh	r3, [r5, #12]
 80031f0:	059a      	lsls	r2, r3, #22
 80031f2:	d402      	bmi.n	80031fa <_vfiprintf_r+0x2a>
 80031f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031f6:	f7ff fdcb 	bl	8002d90 <__retarget_lock_acquire_recursive>
 80031fa:	89ab      	ldrh	r3, [r5, #12]
 80031fc:	071b      	lsls	r3, r3, #28
 80031fe:	d501      	bpl.n	8003204 <_vfiprintf_r+0x34>
 8003200:	692b      	ldr	r3, [r5, #16]
 8003202:	b99b      	cbnz	r3, 800322c <_vfiprintf_r+0x5c>
 8003204:	4629      	mov	r1, r5
 8003206:	4630      	mov	r0, r6
 8003208:	f000 faca 	bl	80037a0 <__swsetup_r>
 800320c:	b170      	cbz	r0, 800322c <_vfiprintf_r+0x5c>
 800320e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003210:	07dc      	lsls	r4, r3, #31
 8003212:	d504      	bpl.n	800321e <_vfiprintf_r+0x4e>
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	b01d      	add	sp, #116	; 0x74
 800321a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321e:	89ab      	ldrh	r3, [r5, #12]
 8003220:	0598      	lsls	r0, r3, #22
 8003222:	d4f7      	bmi.n	8003214 <_vfiprintf_r+0x44>
 8003224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003226:	f7ff fdb4 	bl	8002d92 <__retarget_lock_release_recursive>
 800322a:	e7f3      	b.n	8003214 <_vfiprintf_r+0x44>
 800322c:	2300      	movs	r3, #0
 800322e:	9309      	str	r3, [sp, #36]	; 0x24
 8003230:	2320      	movs	r3, #32
 8003232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003236:	f8cd 800c 	str.w	r8, [sp, #12]
 800323a:	2330      	movs	r3, #48	; 0x30
 800323c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80033f0 <_vfiprintf_r+0x220>
 8003240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003244:	f04f 0901 	mov.w	r9, #1
 8003248:	4623      	mov	r3, r4
 800324a:	469a      	mov	sl, r3
 800324c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003250:	b10a      	cbz	r2, 8003256 <_vfiprintf_r+0x86>
 8003252:	2a25      	cmp	r2, #37	; 0x25
 8003254:	d1f9      	bne.n	800324a <_vfiprintf_r+0x7a>
 8003256:	ebba 0b04 	subs.w	fp, sl, r4
 800325a:	d00b      	beq.n	8003274 <_vfiprintf_r+0xa4>
 800325c:	465b      	mov	r3, fp
 800325e:	4622      	mov	r2, r4
 8003260:	4629      	mov	r1, r5
 8003262:	4630      	mov	r0, r6
 8003264:	f7ff ffa2 	bl	80031ac <__sfputs_r>
 8003268:	3001      	adds	r0, #1
 800326a:	f000 80a9 	beq.w	80033c0 <_vfiprintf_r+0x1f0>
 800326e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003270:	445a      	add	r2, fp
 8003272:	9209      	str	r2, [sp, #36]	; 0x24
 8003274:	f89a 3000 	ldrb.w	r3, [sl]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a1 	beq.w	80033c0 <_vfiprintf_r+0x1f0>
 800327e:	2300      	movs	r3, #0
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003288:	f10a 0a01 	add.w	sl, sl, #1
 800328c:	9304      	str	r3, [sp, #16]
 800328e:	9307      	str	r3, [sp, #28]
 8003290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003294:	931a      	str	r3, [sp, #104]	; 0x68
 8003296:	4654      	mov	r4, sl
 8003298:	2205      	movs	r2, #5
 800329a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800329e:	4854      	ldr	r0, [pc, #336]	; (80033f0 <_vfiprintf_r+0x220>)
 80032a0:	f7fc ffa6 	bl	80001f0 <memchr>
 80032a4:	9a04      	ldr	r2, [sp, #16]
 80032a6:	b9d8      	cbnz	r0, 80032e0 <_vfiprintf_r+0x110>
 80032a8:	06d1      	lsls	r1, r2, #27
 80032aa:	bf44      	itt	mi
 80032ac:	2320      	movmi	r3, #32
 80032ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032b2:	0713      	lsls	r3, r2, #28
 80032b4:	bf44      	itt	mi
 80032b6:	232b      	movmi	r3, #43	; 0x2b
 80032b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032bc:	f89a 3000 	ldrb.w	r3, [sl]
 80032c0:	2b2a      	cmp	r3, #42	; 0x2a
 80032c2:	d015      	beq.n	80032f0 <_vfiprintf_r+0x120>
 80032c4:	9a07      	ldr	r2, [sp, #28]
 80032c6:	4654      	mov	r4, sl
 80032c8:	2000      	movs	r0, #0
 80032ca:	f04f 0c0a 	mov.w	ip, #10
 80032ce:	4621      	mov	r1, r4
 80032d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032d4:	3b30      	subs	r3, #48	; 0x30
 80032d6:	2b09      	cmp	r3, #9
 80032d8:	d94d      	bls.n	8003376 <_vfiprintf_r+0x1a6>
 80032da:	b1b0      	cbz	r0, 800330a <_vfiprintf_r+0x13a>
 80032dc:	9207      	str	r2, [sp, #28]
 80032de:	e014      	b.n	800330a <_vfiprintf_r+0x13a>
 80032e0:	eba0 0308 	sub.w	r3, r0, r8
 80032e4:	fa09 f303 	lsl.w	r3, r9, r3
 80032e8:	4313      	orrs	r3, r2
 80032ea:	9304      	str	r3, [sp, #16]
 80032ec:	46a2      	mov	sl, r4
 80032ee:	e7d2      	b.n	8003296 <_vfiprintf_r+0xc6>
 80032f0:	9b03      	ldr	r3, [sp, #12]
 80032f2:	1d19      	adds	r1, r3, #4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	9103      	str	r1, [sp, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bfbb      	ittet	lt
 80032fc:	425b      	neglt	r3, r3
 80032fe:	f042 0202 	orrlt.w	r2, r2, #2
 8003302:	9307      	strge	r3, [sp, #28]
 8003304:	9307      	strlt	r3, [sp, #28]
 8003306:	bfb8      	it	lt
 8003308:	9204      	strlt	r2, [sp, #16]
 800330a:	7823      	ldrb	r3, [r4, #0]
 800330c:	2b2e      	cmp	r3, #46	; 0x2e
 800330e:	d10c      	bne.n	800332a <_vfiprintf_r+0x15a>
 8003310:	7863      	ldrb	r3, [r4, #1]
 8003312:	2b2a      	cmp	r3, #42	; 0x2a
 8003314:	d134      	bne.n	8003380 <_vfiprintf_r+0x1b0>
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	1d1a      	adds	r2, r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	9203      	str	r2, [sp, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	bfb8      	it	lt
 8003322:	f04f 33ff 	movlt.w	r3, #4294967295
 8003326:	3402      	adds	r4, #2
 8003328:	9305      	str	r3, [sp, #20]
 800332a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003400 <_vfiprintf_r+0x230>
 800332e:	7821      	ldrb	r1, [r4, #0]
 8003330:	2203      	movs	r2, #3
 8003332:	4650      	mov	r0, sl
 8003334:	f7fc ff5c 	bl	80001f0 <memchr>
 8003338:	b138      	cbz	r0, 800334a <_vfiprintf_r+0x17a>
 800333a:	9b04      	ldr	r3, [sp, #16]
 800333c:	eba0 000a 	sub.w	r0, r0, sl
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	4082      	lsls	r2, r0
 8003344:	4313      	orrs	r3, r2
 8003346:	3401      	adds	r4, #1
 8003348:	9304      	str	r3, [sp, #16]
 800334a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800334e:	4829      	ldr	r0, [pc, #164]	; (80033f4 <_vfiprintf_r+0x224>)
 8003350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003354:	2206      	movs	r2, #6
 8003356:	f7fc ff4b 	bl	80001f0 <memchr>
 800335a:	2800      	cmp	r0, #0
 800335c:	d03f      	beq.n	80033de <_vfiprintf_r+0x20e>
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <_vfiprintf_r+0x228>)
 8003360:	bb1b      	cbnz	r3, 80033aa <_vfiprintf_r+0x1da>
 8003362:	9b03      	ldr	r3, [sp, #12]
 8003364:	3307      	adds	r3, #7
 8003366:	f023 0307 	bic.w	r3, r3, #7
 800336a:	3308      	adds	r3, #8
 800336c:	9303      	str	r3, [sp, #12]
 800336e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003370:	443b      	add	r3, r7
 8003372:	9309      	str	r3, [sp, #36]	; 0x24
 8003374:	e768      	b.n	8003248 <_vfiprintf_r+0x78>
 8003376:	fb0c 3202 	mla	r2, ip, r2, r3
 800337a:	460c      	mov	r4, r1
 800337c:	2001      	movs	r0, #1
 800337e:	e7a6      	b.n	80032ce <_vfiprintf_r+0xfe>
 8003380:	2300      	movs	r3, #0
 8003382:	3401      	adds	r4, #1
 8003384:	9305      	str	r3, [sp, #20]
 8003386:	4619      	mov	r1, r3
 8003388:	f04f 0c0a 	mov.w	ip, #10
 800338c:	4620      	mov	r0, r4
 800338e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003392:	3a30      	subs	r2, #48	; 0x30
 8003394:	2a09      	cmp	r2, #9
 8003396:	d903      	bls.n	80033a0 <_vfiprintf_r+0x1d0>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0c6      	beq.n	800332a <_vfiprintf_r+0x15a>
 800339c:	9105      	str	r1, [sp, #20]
 800339e:	e7c4      	b.n	800332a <_vfiprintf_r+0x15a>
 80033a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80033a4:	4604      	mov	r4, r0
 80033a6:	2301      	movs	r3, #1
 80033a8:	e7f0      	b.n	800338c <_vfiprintf_r+0x1bc>
 80033aa:	ab03      	add	r3, sp, #12
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	462a      	mov	r2, r5
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <_vfiprintf_r+0x22c>)
 80033b2:	a904      	add	r1, sp, #16
 80033b4:	4630      	mov	r0, r6
 80033b6:	f3af 8000 	nop.w
 80033ba:	4607      	mov	r7, r0
 80033bc:	1c78      	adds	r0, r7, #1
 80033be:	d1d6      	bne.n	800336e <_vfiprintf_r+0x19e>
 80033c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033c2:	07d9      	lsls	r1, r3, #31
 80033c4:	d405      	bmi.n	80033d2 <_vfiprintf_r+0x202>
 80033c6:	89ab      	ldrh	r3, [r5, #12]
 80033c8:	059a      	lsls	r2, r3, #22
 80033ca:	d402      	bmi.n	80033d2 <_vfiprintf_r+0x202>
 80033cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033ce:	f7ff fce0 	bl	8002d92 <__retarget_lock_release_recursive>
 80033d2:	89ab      	ldrh	r3, [r5, #12]
 80033d4:	065b      	lsls	r3, r3, #25
 80033d6:	f53f af1d 	bmi.w	8003214 <_vfiprintf_r+0x44>
 80033da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033dc:	e71c      	b.n	8003218 <_vfiprintf_r+0x48>
 80033de:	ab03      	add	r3, sp, #12
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	462a      	mov	r2, r5
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <_vfiprintf_r+0x22c>)
 80033e6:	a904      	add	r1, sp, #16
 80033e8:	4630      	mov	r0, r6
 80033ea:	f000 f879 	bl	80034e0 <_printf_i>
 80033ee:	e7e4      	b.n	80033ba <_vfiprintf_r+0x1ea>
 80033f0:	08003ab3 	.word	0x08003ab3
 80033f4:	08003abd 	.word	0x08003abd
 80033f8:	00000000 	.word	0x00000000
 80033fc:	080031ad 	.word	0x080031ad
 8003400:	08003ab9 	.word	0x08003ab9

08003404 <_printf_common>:
 8003404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003408:	4616      	mov	r6, r2
 800340a:	4699      	mov	r9, r3
 800340c:	688a      	ldr	r2, [r1, #8]
 800340e:	690b      	ldr	r3, [r1, #16]
 8003410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003414:	4293      	cmp	r3, r2
 8003416:	bfb8      	it	lt
 8003418:	4613      	movlt	r3, r2
 800341a:	6033      	str	r3, [r6, #0]
 800341c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003420:	4607      	mov	r7, r0
 8003422:	460c      	mov	r4, r1
 8003424:	b10a      	cbz	r2, 800342a <_printf_common+0x26>
 8003426:	3301      	adds	r3, #1
 8003428:	6033      	str	r3, [r6, #0]
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	0699      	lsls	r1, r3, #26
 800342e:	bf42      	ittt	mi
 8003430:	6833      	ldrmi	r3, [r6, #0]
 8003432:	3302      	addmi	r3, #2
 8003434:	6033      	strmi	r3, [r6, #0]
 8003436:	6825      	ldr	r5, [r4, #0]
 8003438:	f015 0506 	ands.w	r5, r5, #6
 800343c:	d106      	bne.n	800344c <_printf_common+0x48>
 800343e:	f104 0a19 	add.w	sl, r4, #25
 8003442:	68e3      	ldr	r3, [r4, #12]
 8003444:	6832      	ldr	r2, [r6, #0]
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	42ab      	cmp	r3, r5
 800344a:	dc26      	bgt.n	800349a <_printf_common+0x96>
 800344c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003450:	1e13      	subs	r3, r2, #0
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	bf18      	it	ne
 8003456:	2301      	movne	r3, #1
 8003458:	0692      	lsls	r2, r2, #26
 800345a:	d42b      	bmi.n	80034b4 <_printf_common+0xb0>
 800345c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003460:	4649      	mov	r1, r9
 8003462:	4638      	mov	r0, r7
 8003464:	47c0      	blx	r8
 8003466:	3001      	adds	r0, #1
 8003468:	d01e      	beq.n	80034a8 <_printf_common+0xa4>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	6922      	ldr	r2, [r4, #16]
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	2b04      	cmp	r3, #4
 8003474:	bf02      	ittt	eq
 8003476:	68e5      	ldreq	r5, [r4, #12]
 8003478:	6833      	ldreq	r3, [r6, #0]
 800347a:	1aed      	subeq	r5, r5, r3
 800347c:	68a3      	ldr	r3, [r4, #8]
 800347e:	bf0c      	ite	eq
 8003480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003484:	2500      	movne	r5, #0
 8003486:	4293      	cmp	r3, r2
 8003488:	bfc4      	itt	gt
 800348a:	1a9b      	subgt	r3, r3, r2
 800348c:	18ed      	addgt	r5, r5, r3
 800348e:	2600      	movs	r6, #0
 8003490:	341a      	adds	r4, #26
 8003492:	42b5      	cmp	r5, r6
 8003494:	d11a      	bne.n	80034cc <_printf_common+0xc8>
 8003496:	2000      	movs	r0, #0
 8003498:	e008      	b.n	80034ac <_printf_common+0xa8>
 800349a:	2301      	movs	r3, #1
 800349c:	4652      	mov	r2, sl
 800349e:	4649      	mov	r1, r9
 80034a0:	4638      	mov	r0, r7
 80034a2:	47c0      	blx	r8
 80034a4:	3001      	adds	r0, #1
 80034a6:	d103      	bne.n	80034b0 <_printf_common+0xac>
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7c6      	b.n	8003442 <_printf_common+0x3e>
 80034b4:	18e1      	adds	r1, r4, r3
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	2030      	movs	r0, #48	; 0x30
 80034ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034be:	4422      	add	r2, r4
 80034c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034c8:	3302      	adds	r3, #2
 80034ca:	e7c7      	b.n	800345c <_printf_common+0x58>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4622      	mov	r2, r4
 80034d0:	4649      	mov	r1, r9
 80034d2:	4638      	mov	r0, r7
 80034d4:	47c0      	blx	r8
 80034d6:	3001      	adds	r0, #1
 80034d8:	d0e6      	beq.n	80034a8 <_printf_common+0xa4>
 80034da:	3601      	adds	r6, #1
 80034dc:	e7d9      	b.n	8003492 <_printf_common+0x8e>
	...

080034e0 <_printf_i>:
 80034e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034e4:	7e0f      	ldrb	r7, [r1, #24]
 80034e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034e8:	2f78      	cmp	r7, #120	; 0x78
 80034ea:	4691      	mov	r9, r2
 80034ec:	4680      	mov	r8, r0
 80034ee:	460c      	mov	r4, r1
 80034f0:	469a      	mov	sl, r3
 80034f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034f6:	d807      	bhi.n	8003508 <_printf_i+0x28>
 80034f8:	2f62      	cmp	r7, #98	; 0x62
 80034fa:	d80a      	bhi.n	8003512 <_printf_i+0x32>
 80034fc:	2f00      	cmp	r7, #0
 80034fe:	f000 80d4 	beq.w	80036aa <_printf_i+0x1ca>
 8003502:	2f58      	cmp	r7, #88	; 0x58
 8003504:	f000 80c0 	beq.w	8003688 <_printf_i+0x1a8>
 8003508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800350c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003510:	e03a      	b.n	8003588 <_printf_i+0xa8>
 8003512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003516:	2b15      	cmp	r3, #21
 8003518:	d8f6      	bhi.n	8003508 <_printf_i+0x28>
 800351a:	a101      	add	r1, pc, #4	; (adr r1, 8003520 <_printf_i+0x40>)
 800351c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003520:	08003579 	.word	0x08003579
 8003524:	0800358d 	.word	0x0800358d
 8003528:	08003509 	.word	0x08003509
 800352c:	08003509 	.word	0x08003509
 8003530:	08003509 	.word	0x08003509
 8003534:	08003509 	.word	0x08003509
 8003538:	0800358d 	.word	0x0800358d
 800353c:	08003509 	.word	0x08003509
 8003540:	08003509 	.word	0x08003509
 8003544:	08003509 	.word	0x08003509
 8003548:	08003509 	.word	0x08003509
 800354c:	08003691 	.word	0x08003691
 8003550:	080035b9 	.word	0x080035b9
 8003554:	0800364b 	.word	0x0800364b
 8003558:	08003509 	.word	0x08003509
 800355c:	08003509 	.word	0x08003509
 8003560:	080036b3 	.word	0x080036b3
 8003564:	08003509 	.word	0x08003509
 8003568:	080035b9 	.word	0x080035b9
 800356c:	08003509 	.word	0x08003509
 8003570:	08003509 	.word	0x08003509
 8003574:	08003653 	.word	0x08003653
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	1d1a      	adds	r2, r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	602a      	str	r2, [r5, #0]
 8003580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003588:	2301      	movs	r3, #1
 800358a:	e09f      	b.n	80036cc <_printf_i+0x1ec>
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	0607      	lsls	r7, r0, #24
 8003592:	f103 0104 	add.w	r1, r3, #4
 8003596:	6029      	str	r1, [r5, #0]
 8003598:	d501      	bpl.n	800359e <_printf_i+0xbe>
 800359a:	681e      	ldr	r6, [r3, #0]
 800359c:	e003      	b.n	80035a6 <_printf_i+0xc6>
 800359e:	0646      	lsls	r6, r0, #25
 80035a0:	d5fb      	bpl.n	800359a <_printf_i+0xba>
 80035a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035a6:	2e00      	cmp	r6, #0
 80035a8:	da03      	bge.n	80035b2 <_printf_i+0xd2>
 80035aa:	232d      	movs	r3, #45	; 0x2d
 80035ac:	4276      	negs	r6, r6
 80035ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035b2:	485a      	ldr	r0, [pc, #360]	; (800371c <_printf_i+0x23c>)
 80035b4:	230a      	movs	r3, #10
 80035b6:	e012      	b.n	80035de <_printf_i+0xfe>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	1d19      	adds	r1, r3, #4
 80035be:	6029      	str	r1, [r5, #0]
 80035c0:	0605      	lsls	r5, r0, #24
 80035c2:	d501      	bpl.n	80035c8 <_printf_i+0xe8>
 80035c4:	681e      	ldr	r6, [r3, #0]
 80035c6:	e002      	b.n	80035ce <_printf_i+0xee>
 80035c8:	0641      	lsls	r1, r0, #25
 80035ca:	d5fb      	bpl.n	80035c4 <_printf_i+0xe4>
 80035cc:	881e      	ldrh	r6, [r3, #0]
 80035ce:	4853      	ldr	r0, [pc, #332]	; (800371c <_printf_i+0x23c>)
 80035d0:	2f6f      	cmp	r7, #111	; 0x6f
 80035d2:	bf0c      	ite	eq
 80035d4:	2308      	moveq	r3, #8
 80035d6:	230a      	movne	r3, #10
 80035d8:	2100      	movs	r1, #0
 80035da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035de:	6865      	ldr	r5, [r4, #4]
 80035e0:	60a5      	str	r5, [r4, #8]
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	bfa2      	ittt	ge
 80035e6:	6821      	ldrge	r1, [r4, #0]
 80035e8:	f021 0104 	bicge.w	r1, r1, #4
 80035ec:	6021      	strge	r1, [r4, #0]
 80035ee:	b90e      	cbnz	r6, 80035f4 <_printf_i+0x114>
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	d04b      	beq.n	800368c <_printf_i+0x1ac>
 80035f4:	4615      	mov	r5, r2
 80035f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80035fa:	fb03 6711 	mls	r7, r3, r1, r6
 80035fe:	5dc7      	ldrb	r7, [r0, r7]
 8003600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003604:	4637      	mov	r7, r6
 8003606:	42bb      	cmp	r3, r7
 8003608:	460e      	mov	r6, r1
 800360a:	d9f4      	bls.n	80035f6 <_printf_i+0x116>
 800360c:	2b08      	cmp	r3, #8
 800360e:	d10b      	bne.n	8003628 <_printf_i+0x148>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	07de      	lsls	r6, r3, #31
 8003614:	d508      	bpl.n	8003628 <_printf_i+0x148>
 8003616:	6923      	ldr	r3, [r4, #16]
 8003618:	6861      	ldr	r1, [r4, #4]
 800361a:	4299      	cmp	r1, r3
 800361c:	bfde      	ittt	le
 800361e:	2330      	movle	r3, #48	; 0x30
 8003620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003624:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003628:	1b52      	subs	r2, r2, r5
 800362a:	6122      	str	r2, [r4, #16]
 800362c:	f8cd a000 	str.w	sl, [sp]
 8003630:	464b      	mov	r3, r9
 8003632:	aa03      	add	r2, sp, #12
 8003634:	4621      	mov	r1, r4
 8003636:	4640      	mov	r0, r8
 8003638:	f7ff fee4 	bl	8003404 <_printf_common>
 800363c:	3001      	adds	r0, #1
 800363e:	d14a      	bne.n	80036d6 <_printf_i+0x1f6>
 8003640:	f04f 30ff 	mov.w	r0, #4294967295
 8003644:	b004      	add	sp, #16
 8003646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f043 0320 	orr.w	r3, r3, #32
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	4833      	ldr	r0, [pc, #204]	; (8003720 <_printf_i+0x240>)
 8003654:	2778      	movs	r7, #120	; 0x78
 8003656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	6829      	ldr	r1, [r5, #0]
 800365e:	061f      	lsls	r7, r3, #24
 8003660:	f851 6b04 	ldr.w	r6, [r1], #4
 8003664:	d402      	bmi.n	800366c <_printf_i+0x18c>
 8003666:	065f      	lsls	r7, r3, #25
 8003668:	bf48      	it	mi
 800366a:	b2b6      	uxthmi	r6, r6
 800366c:	07df      	lsls	r7, r3, #31
 800366e:	bf48      	it	mi
 8003670:	f043 0320 	orrmi.w	r3, r3, #32
 8003674:	6029      	str	r1, [r5, #0]
 8003676:	bf48      	it	mi
 8003678:	6023      	strmi	r3, [r4, #0]
 800367a:	b91e      	cbnz	r6, 8003684 <_printf_i+0x1a4>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	f023 0320 	bic.w	r3, r3, #32
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	2310      	movs	r3, #16
 8003686:	e7a7      	b.n	80035d8 <_printf_i+0xf8>
 8003688:	4824      	ldr	r0, [pc, #144]	; (800371c <_printf_i+0x23c>)
 800368a:	e7e4      	b.n	8003656 <_printf_i+0x176>
 800368c:	4615      	mov	r5, r2
 800368e:	e7bd      	b.n	800360c <_printf_i+0x12c>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	6826      	ldr	r6, [r4, #0]
 8003694:	6961      	ldr	r1, [r4, #20]
 8003696:	1d18      	adds	r0, r3, #4
 8003698:	6028      	str	r0, [r5, #0]
 800369a:	0635      	lsls	r5, r6, #24
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	d501      	bpl.n	80036a4 <_printf_i+0x1c4>
 80036a0:	6019      	str	r1, [r3, #0]
 80036a2:	e002      	b.n	80036aa <_printf_i+0x1ca>
 80036a4:	0670      	lsls	r0, r6, #25
 80036a6:	d5fb      	bpl.n	80036a0 <_printf_i+0x1c0>
 80036a8:	8019      	strh	r1, [r3, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	6123      	str	r3, [r4, #16]
 80036ae:	4615      	mov	r5, r2
 80036b0:	e7bc      	b.n	800362c <_printf_i+0x14c>
 80036b2:	682b      	ldr	r3, [r5, #0]
 80036b4:	1d1a      	adds	r2, r3, #4
 80036b6:	602a      	str	r2, [r5, #0]
 80036b8:	681d      	ldr	r5, [r3, #0]
 80036ba:	6862      	ldr	r2, [r4, #4]
 80036bc:	2100      	movs	r1, #0
 80036be:	4628      	mov	r0, r5
 80036c0:	f7fc fd96 	bl	80001f0 <memchr>
 80036c4:	b108      	cbz	r0, 80036ca <_printf_i+0x1ea>
 80036c6:	1b40      	subs	r0, r0, r5
 80036c8:	6060      	str	r0, [r4, #4]
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	6123      	str	r3, [r4, #16]
 80036ce:	2300      	movs	r3, #0
 80036d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d4:	e7aa      	b.n	800362c <_printf_i+0x14c>
 80036d6:	6923      	ldr	r3, [r4, #16]
 80036d8:	462a      	mov	r2, r5
 80036da:	4649      	mov	r1, r9
 80036dc:	4640      	mov	r0, r8
 80036de:	47d0      	blx	sl
 80036e0:	3001      	adds	r0, #1
 80036e2:	d0ad      	beq.n	8003640 <_printf_i+0x160>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	079b      	lsls	r3, r3, #30
 80036e8:	d413      	bmi.n	8003712 <_printf_i+0x232>
 80036ea:	68e0      	ldr	r0, [r4, #12]
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	4298      	cmp	r0, r3
 80036f0:	bfb8      	it	lt
 80036f2:	4618      	movlt	r0, r3
 80036f4:	e7a6      	b.n	8003644 <_printf_i+0x164>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4632      	mov	r2, r6
 80036fa:	4649      	mov	r1, r9
 80036fc:	4640      	mov	r0, r8
 80036fe:	47d0      	blx	sl
 8003700:	3001      	adds	r0, #1
 8003702:	d09d      	beq.n	8003640 <_printf_i+0x160>
 8003704:	3501      	adds	r5, #1
 8003706:	68e3      	ldr	r3, [r4, #12]
 8003708:	9903      	ldr	r1, [sp, #12]
 800370a:	1a5b      	subs	r3, r3, r1
 800370c:	42ab      	cmp	r3, r5
 800370e:	dcf2      	bgt.n	80036f6 <_printf_i+0x216>
 8003710:	e7eb      	b.n	80036ea <_printf_i+0x20a>
 8003712:	2500      	movs	r5, #0
 8003714:	f104 0619 	add.w	r6, r4, #25
 8003718:	e7f5      	b.n	8003706 <_printf_i+0x226>
 800371a:	bf00      	nop
 800371c:	08003ac4 	.word	0x08003ac4
 8003720:	08003ad5 	.word	0x08003ad5

08003724 <__swbuf_r>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	460e      	mov	r6, r1
 8003728:	4614      	mov	r4, r2
 800372a:	4605      	mov	r5, r0
 800372c:	b118      	cbz	r0, 8003736 <__swbuf_r+0x12>
 800372e:	6a03      	ldr	r3, [r0, #32]
 8003730:	b90b      	cbnz	r3, 8003736 <__swbuf_r+0x12>
 8003732:	f7ff fa3b 	bl	8002bac <__sinit>
 8003736:	69a3      	ldr	r3, [r4, #24]
 8003738:	60a3      	str	r3, [r4, #8]
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	071a      	lsls	r2, r3, #28
 800373e:	d525      	bpl.n	800378c <__swbuf_r+0x68>
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	b31b      	cbz	r3, 800378c <__swbuf_r+0x68>
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	6922      	ldr	r2, [r4, #16]
 8003748:	1a98      	subs	r0, r3, r2
 800374a:	6963      	ldr	r3, [r4, #20]
 800374c:	b2f6      	uxtb	r6, r6
 800374e:	4283      	cmp	r3, r0
 8003750:	4637      	mov	r7, r6
 8003752:	dc04      	bgt.n	800375e <__swbuf_r+0x3a>
 8003754:	4621      	mov	r1, r4
 8003756:	4628      	mov	r0, r5
 8003758:	f7ff fcc0 	bl	80030dc <_fflush_r>
 800375c:	b9e0      	cbnz	r0, 8003798 <__swbuf_r+0x74>
 800375e:	68a3      	ldr	r3, [r4, #8]
 8003760:	3b01      	subs	r3, #1
 8003762:	60a3      	str	r3, [r4, #8]
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	6022      	str	r2, [r4, #0]
 800376a:	701e      	strb	r6, [r3, #0]
 800376c:	6962      	ldr	r2, [r4, #20]
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	429a      	cmp	r2, r3
 8003772:	d004      	beq.n	800377e <__swbuf_r+0x5a>
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	07db      	lsls	r3, r3, #31
 8003778:	d506      	bpl.n	8003788 <__swbuf_r+0x64>
 800377a:	2e0a      	cmp	r6, #10
 800377c:	d104      	bne.n	8003788 <__swbuf_r+0x64>
 800377e:	4621      	mov	r1, r4
 8003780:	4628      	mov	r0, r5
 8003782:	f7ff fcab 	bl	80030dc <_fflush_r>
 8003786:	b938      	cbnz	r0, 8003798 <__swbuf_r+0x74>
 8003788:	4638      	mov	r0, r7
 800378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800378c:	4621      	mov	r1, r4
 800378e:	4628      	mov	r0, r5
 8003790:	f000 f806 	bl	80037a0 <__swsetup_r>
 8003794:	2800      	cmp	r0, #0
 8003796:	d0d5      	beq.n	8003744 <__swbuf_r+0x20>
 8003798:	f04f 37ff 	mov.w	r7, #4294967295
 800379c:	e7f4      	b.n	8003788 <__swbuf_r+0x64>
	...

080037a0 <__swsetup_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <__swsetup_r+0xac>)
 80037a4:	4605      	mov	r5, r0
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	460c      	mov	r4, r1
 80037aa:	b118      	cbz	r0, 80037b4 <__swsetup_r+0x14>
 80037ac:	6a03      	ldr	r3, [r0, #32]
 80037ae:	b90b      	cbnz	r3, 80037b4 <__swsetup_r+0x14>
 80037b0:	f7ff f9fc 	bl	8002bac <__sinit>
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037ba:	0718      	lsls	r0, r3, #28
 80037bc:	d422      	bmi.n	8003804 <__swsetup_r+0x64>
 80037be:	06d9      	lsls	r1, r3, #27
 80037c0:	d407      	bmi.n	80037d2 <__swsetup_r+0x32>
 80037c2:	2309      	movs	r3, #9
 80037c4:	602b      	str	r3, [r5, #0]
 80037c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037ca:	81a3      	strh	r3, [r4, #12]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	e034      	b.n	800383c <__swsetup_r+0x9c>
 80037d2:	0758      	lsls	r0, r3, #29
 80037d4:	d512      	bpl.n	80037fc <__swsetup_r+0x5c>
 80037d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d8:	b141      	cbz	r1, 80037ec <__swsetup_r+0x4c>
 80037da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037de:	4299      	cmp	r1, r3
 80037e0:	d002      	beq.n	80037e8 <__swsetup_r+0x48>
 80037e2:	4628      	mov	r0, r5
 80037e4:	f7ff faf4 	bl	8002dd0 <_free_r>
 80037e8:	2300      	movs	r3, #0
 80037ea:	6363      	str	r3, [r4, #52]	; 0x34
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	2300      	movs	r3, #0
 80037f6:	6063      	str	r3, [r4, #4]
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	6023      	str	r3, [r4, #0]
 80037fc:	89a3      	ldrh	r3, [r4, #12]
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	b94b      	cbnz	r3, 800381c <__swsetup_r+0x7c>
 8003808:	89a3      	ldrh	r3, [r4, #12]
 800380a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d003      	beq.n	800381c <__swsetup_r+0x7c>
 8003814:	4621      	mov	r1, r4
 8003816:	4628      	mov	r0, r5
 8003818:	f000 f884 	bl	8003924 <__smakebuf_r>
 800381c:	89a0      	ldrh	r0, [r4, #12]
 800381e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003822:	f010 0301 	ands.w	r3, r0, #1
 8003826:	d00a      	beq.n	800383e <__swsetup_r+0x9e>
 8003828:	2300      	movs	r3, #0
 800382a:	60a3      	str	r3, [r4, #8]
 800382c:	6963      	ldr	r3, [r4, #20]
 800382e:	425b      	negs	r3, r3
 8003830:	61a3      	str	r3, [r4, #24]
 8003832:	6923      	ldr	r3, [r4, #16]
 8003834:	b943      	cbnz	r3, 8003848 <__swsetup_r+0xa8>
 8003836:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800383a:	d1c4      	bne.n	80037c6 <__swsetup_r+0x26>
 800383c:	bd38      	pop	{r3, r4, r5, pc}
 800383e:	0781      	lsls	r1, r0, #30
 8003840:	bf58      	it	pl
 8003842:	6963      	ldrpl	r3, [r4, #20]
 8003844:	60a3      	str	r3, [r4, #8]
 8003846:	e7f4      	b.n	8003832 <__swsetup_r+0x92>
 8003848:	2000      	movs	r0, #0
 800384a:	e7f7      	b.n	800383c <__swsetup_r+0x9c>
 800384c:	20000064 	.word	0x20000064

08003850 <_raise_r>:
 8003850:	291f      	cmp	r1, #31
 8003852:	b538      	push	{r3, r4, r5, lr}
 8003854:	4604      	mov	r4, r0
 8003856:	460d      	mov	r5, r1
 8003858:	d904      	bls.n	8003864 <_raise_r+0x14>
 800385a:	2316      	movs	r3, #22
 800385c:	6003      	str	r3, [r0, #0]
 800385e:	f04f 30ff 	mov.w	r0, #4294967295
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003866:	b112      	cbz	r2, 800386e <_raise_r+0x1e>
 8003868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800386c:	b94b      	cbnz	r3, 8003882 <_raise_r+0x32>
 800386e:	4620      	mov	r0, r4
 8003870:	f000 f830 	bl	80038d4 <_getpid_r>
 8003874:	462a      	mov	r2, r5
 8003876:	4601      	mov	r1, r0
 8003878:	4620      	mov	r0, r4
 800387a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800387e:	f000 b817 	b.w	80038b0 <_kill_r>
 8003882:	2b01      	cmp	r3, #1
 8003884:	d00a      	beq.n	800389c <_raise_r+0x4c>
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	d103      	bne.n	8003892 <_raise_r+0x42>
 800388a:	2316      	movs	r3, #22
 800388c:	6003      	str	r3, [r0, #0]
 800388e:	2001      	movs	r0, #1
 8003890:	e7e7      	b.n	8003862 <_raise_r+0x12>
 8003892:	2400      	movs	r4, #0
 8003894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003898:	4628      	mov	r0, r5
 800389a:	4798      	blx	r3
 800389c:	2000      	movs	r0, #0
 800389e:	e7e0      	b.n	8003862 <_raise_r+0x12>

080038a0 <raise>:
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <raise+0xc>)
 80038a2:	4601      	mov	r1, r0
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	f7ff bfd3 	b.w	8003850 <_raise_r>
 80038aa:	bf00      	nop
 80038ac:	20000064 	.word	0x20000064

080038b0 <_kill_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	4d07      	ldr	r5, [pc, #28]	; (80038d0 <_kill_r+0x20>)
 80038b4:	2300      	movs	r3, #0
 80038b6:	4604      	mov	r4, r0
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	602b      	str	r3, [r5, #0]
 80038be:	f7fd f90d 	bl	8000adc <_kill>
 80038c2:	1c43      	adds	r3, r0, #1
 80038c4:	d102      	bne.n	80038cc <_kill_r+0x1c>
 80038c6:	682b      	ldr	r3, [r5, #0]
 80038c8:	b103      	cbz	r3, 80038cc <_kill_r+0x1c>
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	bd38      	pop	{r3, r4, r5, pc}
 80038ce:	bf00      	nop
 80038d0:	20000240 	.word	0x20000240

080038d4 <_getpid_r>:
 80038d4:	f7fd b8fa 	b.w	8000acc <_getpid>

080038d8 <__swhatbuf_r>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	460c      	mov	r4, r1
 80038dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e0:	2900      	cmp	r1, #0
 80038e2:	b096      	sub	sp, #88	; 0x58
 80038e4:	4615      	mov	r5, r2
 80038e6:	461e      	mov	r6, r3
 80038e8:	da0d      	bge.n	8003906 <__swhatbuf_r+0x2e>
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	bf0c      	ite	eq
 80038f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80038fa:	2340      	movne	r3, #64	; 0x40
 80038fc:	2000      	movs	r0, #0
 80038fe:	6031      	str	r1, [r6, #0]
 8003900:	602b      	str	r3, [r5, #0]
 8003902:	b016      	add	sp, #88	; 0x58
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	466a      	mov	r2, sp
 8003908:	f000 f848 	bl	800399c <_fstat_r>
 800390c:	2800      	cmp	r0, #0
 800390e:	dbec      	blt.n	80038ea <__swhatbuf_r+0x12>
 8003910:	9901      	ldr	r1, [sp, #4]
 8003912:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003916:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800391a:	4259      	negs	r1, r3
 800391c:	4159      	adcs	r1, r3
 800391e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003922:	e7eb      	b.n	80038fc <__swhatbuf_r+0x24>

08003924 <__smakebuf_r>:
 8003924:	898b      	ldrh	r3, [r1, #12]
 8003926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003928:	079d      	lsls	r5, r3, #30
 800392a:	4606      	mov	r6, r0
 800392c:	460c      	mov	r4, r1
 800392e:	d507      	bpl.n	8003940 <__smakebuf_r+0x1c>
 8003930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	6123      	str	r3, [r4, #16]
 8003938:	2301      	movs	r3, #1
 800393a:	6163      	str	r3, [r4, #20]
 800393c:	b002      	add	sp, #8
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	ab01      	add	r3, sp, #4
 8003942:	466a      	mov	r2, sp
 8003944:	f7ff ffc8 	bl	80038d8 <__swhatbuf_r>
 8003948:	9900      	ldr	r1, [sp, #0]
 800394a:	4605      	mov	r5, r0
 800394c:	4630      	mov	r0, r6
 800394e:	f7ff fab3 	bl	8002eb8 <_malloc_r>
 8003952:	b948      	cbnz	r0, 8003968 <__smakebuf_r+0x44>
 8003954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003958:	059a      	lsls	r2, r3, #22
 800395a:	d4ef      	bmi.n	800393c <__smakebuf_r+0x18>
 800395c:	f023 0303 	bic.w	r3, r3, #3
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	e7e3      	b.n	8003930 <__smakebuf_r+0xc>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	6020      	str	r0, [r4, #0]
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	81a3      	strh	r3, [r4, #12]
 8003972:	9b00      	ldr	r3, [sp, #0]
 8003974:	6163      	str	r3, [r4, #20]
 8003976:	9b01      	ldr	r3, [sp, #4]
 8003978:	6120      	str	r0, [r4, #16]
 800397a:	b15b      	cbz	r3, 8003994 <__smakebuf_r+0x70>
 800397c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f81d 	bl	80039c0 <_isatty_r>
 8003986:	b128      	cbz	r0, 8003994 <__smakebuf_r+0x70>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	431d      	orrs	r5, r3
 8003998:	81a5      	strh	r5, [r4, #12]
 800399a:	e7cf      	b.n	800393c <__smakebuf_r+0x18>

0800399c <_fstat_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	; (80039bc <_fstat_r+0x20>)
 80039a0:	2300      	movs	r3, #0
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	602b      	str	r3, [r5, #0]
 80039aa:	f7fd f8f6 	bl	8000b9a <_fstat>
 80039ae:	1c43      	adds	r3, r0, #1
 80039b0:	d102      	bne.n	80039b8 <_fstat_r+0x1c>
 80039b2:	682b      	ldr	r3, [r5, #0]
 80039b4:	b103      	cbz	r3, 80039b8 <_fstat_r+0x1c>
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	20000240 	.word	0x20000240

080039c0 <_isatty_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d06      	ldr	r5, [pc, #24]	; (80039dc <_isatty_r+0x1c>)
 80039c4:	2300      	movs	r3, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fd f8f5 	bl	8000bba <_isatty>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_isatty_r+0x1a>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_isatty_r+0x1a>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	20000240 	.word	0x20000240

080039e0 <_init>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	bf00      	nop
 80039e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e6:	bc08      	pop	{r3}
 80039e8:	469e      	mov	lr, r3
 80039ea:	4770      	bx	lr

080039ec <_fini>:
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	bf00      	nop
 80039f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f2:	bc08      	pop	{r3}
 80039f4:	469e      	mov	lr, r3
 80039f6:	4770      	bx	lr
